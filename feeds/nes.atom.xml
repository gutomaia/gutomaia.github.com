<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>gutomaia - nes</title><link href="https://gutomaia.net/" rel="alternate"></link><link href="https://gutomaia.net/feeds/nes.atom.xml" rel="self"></link><id>https://gutomaia.net/</id><updated>2024-05-01T20:00:00-03:00</updated><subtitle>Pythonist with a NES and an ☂</subtitle><entry><title>wedNESday #9 - Exploring NES Graphics</title><link href="https://gutomaia.net/wednesday_9.html" rel="alternate"></link><published>2024-05-01T20:00:00-03:00</published><updated>2024-05-01T20:00:00-03:00</updated><author><name>Guto Maia</name></author><id>tag:gutomaia.net,2024-05-01:/wednesday_9.html</id><summary type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="a long time ago" src="https://gutomaia.net/images/fightclub.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;Playing around with NES graphics can be an incredibly fun and rewarding experience. Transitioning from that blank screen to one filled with tiles in a nametable highlights the capabilities and limitations of the platform. It's like a window ready to explode.&lt;/p&gt;
&lt;p&gt;Through this post, we might use some terms and …&lt;/p&gt;</summary><content type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="a long time ago" src="https://gutomaia.net/images/fightclub.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;Playing around with NES graphics can be an incredibly fun and rewarding experience. Transitioning from that blank screen to one filled with tiles in a nametable highlights the capabilities and limitations of the platform. It's like a window ready to explode.&lt;/p&gt;
&lt;p&gt;Through this post, we might use some terms and conventions on the NES. There is NES 101 at the end of the post if you may need.&lt;/p&gt;
&lt;p&gt;In this post, you may stomp in some terms and conventions used in NES game development. For those unfamiliar with NES graphs, we've included a handy NES 101 section at the end of the post for reference.&lt;/p&gt;
&lt;div class="section" id="the-goal"&gt;
&lt;h2&gt;The goal&lt;/h2&gt;
&lt;p&gt;The objective is to import any image onto a NES screen. However, when importing a regular image, we may encounter loss in colors and resolution. How can we assess the accuracy of the program?&lt;/p&gt;
&lt;p&gt;The solution is simple: import screens that the NES was capable of rendering. By comparing the imported images with the original NES screens, we can gauge the program's accuracy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tyler-d"&gt;
&lt;h2&gt;Tyler D&lt;/h2&gt;
&lt;p&gt;I've developed a command to import images onto a NES screen. Does it work effectively? How accurate it is? But how can I verify this? How can I ensure its reliability?&lt;/p&gt;
&lt;p&gt;Let's review some of the know glitchs.&lt;/p&gt;
&lt;div class="section" id="the-inner-war"&gt;
&lt;h3&gt;The Inner War&lt;/h3&gt;
&lt;p&gt;In &amp;quot;Abadox: The Deadly Inner War&amp;quot; is a horizontally scrolling shoot 'em up video game developed by Natsume and published by Milton Bradley Company released in North America in 1990 and in Europe in 1991.&lt;/p&gt;
&lt;p&gt;In &amp;quot;Abadox,&amp;quot; players control a small spaceship tasked with navigating through the insides of a giant alien organism known as &amp;quot;Abadox&amp;quot; to rescue the princess Maria. The game's story is set in the year 5012, where the planet Abadox has been invaded and consumed by a giant alien organism. The princess Maria has been swallowed by the creature, and the player must pilot their ship through various levels of the organism's interior to rescue her and ultimately destroy the creature.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Orignal&lt;/th&gt;
&lt;th class="head"&gt;Emulated&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/abadox_the_deadly_inner_war.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/abadox_the_deadly_inner_war_emulated.png" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Above, we have the original title screen image side by side with the emulated one generated by the tool. At first glance, it looks quite amazing. Look again, the eyes can be deceiving.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Diff&lt;/th&gt;
&lt;th class="head"&gt;FCEUX Screenshot&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/abadox_the_deadly_inner_war_diff.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/abadox_the_deadly_inner_war_screenshot.png" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Now, with more detail, we can observe on the left the disparities between the Original and the Emulated images. In orange, we can see the differences in Metatiles, while in yellow, the discrepancies in tiles are highlighted, and in red, the pixel differences stand out. These discrepancies may have occurred because the original image might have utilized sprites to enhance certain colors. I will demonstrate this in the next example. However, what truly stands out here is the color disparity between the Emulated and the FCEUX Screenshot. This discrepancy arises from my improper utilization of the actual FCEUX palette table. This marks our first glitch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-m-batman-without-sprite-overlay"&gt;
&lt;h3&gt;I'm Batman, without sprite overlay&lt;/h3&gt;
&lt;p&gt;&amp;quot;Batman: The Video Game&amp;quot; is a side-scrolling action-platformer developed and published by Sunsoft. Released in 1989, it's based on the 1989 film &amp;quot;Batman&amp;quot; directed by Tim Burton.&lt;/p&gt;
&lt;p&gt;In the game, players control Batman as he fights through Gotham City to stop the villainous Joker and save the city. The gameplay consists of traversing side-scrolling levels, battling enemies, and ultimately confronting bosses at the end of each stage. Batman's primary weapon is his Batarang, but he can also perform melee attacks and use other gadgets such as a grappling hook to navigate levels.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Orignal&lt;/th&gt;
&lt;th class="head"&gt;Emulated&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/batman.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/batman_emulated.png" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The title screen is astonishing. For its time, it exudes a photorealistic feeling. However, in emulation, looks a more noir aesthetic.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Diff&lt;/th&gt;
&lt;th class="head"&gt;FCEUX Screenshot&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/batman_diff.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/batman_screenshot.png" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I see, some yellow tones were omitted from the result. Each 16x16 metatile block has a 4-color limit. To compensate for this, the game utilizes sprites in certain areas of the face and symbol to incorporate subtle touches. This time, we don't need the difference image to notice, although you can also check it out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="double-dragon-s-dungeons"&gt;
&lt;h3&gt;Double Dragon's Dungeons&lt;/h3&gt;
&lt;p&gt;&amp;quot;Advanced Dungeons &amp;amp; Dragons: DragonStrike&amp;quot; is a fantasy-themed video game released in 1992. Developed by Westwood Associates and published by FCI, the game is based on the &amp;quot;DragonStrike&amp;quot; tabletop role-playing game (RPG) from the Dungeons &amp;amp; Dragons franchise.&lt;/p&gt;
&lt;p&gt;In &amp;quot;DragonStrike,&amp;quot; players assume the role of a dragon rider tasked with defeating evil forces threatening the land of Krynn. The game combines elements of action and flight simulation with RPG mechanics, offering a unique gaming experience within the Dungeons &amp;amp; Dragons universe.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Orignal&lt;/th&gt;
&lt;th class="head"&gt;Emulated&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/advanced_dungeons_dragons_dragon_strike.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/advanced_dungeons_dragons_dragon_strike_emulated.png" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;A superb &amp;quot;Double Dragon&amp;quot; title screen that doesn't depict the typical theme of brothers fighting for a girl. However, it couldn't fit into the regular pattern table.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Diff&lt;/th&gt;
&lt;th class="head"&gt;FCEUX Screenshot&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/advanced_dungeons_dragons_dragon_strike_diff.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/advanced_dungeons_dragons_dragon_strike_screenshot.png" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;That image utilizes sprites to render an entire area. With only the NES's background tiles, we can display at most 256 unique tiles on the screen. However, the screen is composed of 960 tiles. This inevitably leads to border issues, as tile repetition becomes necessary. To address this limitation, the game renders part of the screen using sprites. However, there's a catch: we can display at most 64 sprites on the screen, with no more than 8 in the same line. This allows for a maximum of 320 unique tiles on the screen. Therefore, despite this workaround, there is still some repetition present in the rendering.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="still-there"&gt;
&lt;h3&gt;Still there?&lt;/h3&gt;
&lt;p&gt;I doubt, that you are still reading this or that you did care about the resume of the previous game, if it was released in 1990 or not.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Orignal&lt;/th&gt;
&lt;th class="head"&gt;Emulated&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/addams_family_the_pugsley_s_scavenger_hunt.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/addams_family_the_pugsley_s_scavenger_hunt_emulated.png" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Even what would be the simplyst screen shot, some minor glitchs would arrise.
See the botton part of the image?&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Diff&lt;/th&gt;
&lt;th class="head"&gt;FCEUX Screenshot&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/addams_family_the_pugsley_s_scavenger_hunt_diff.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/addams_family_the_pugsley_s_scavenger_hunt_screenshot.png" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Problem here is dua to some attribute table missing. There must be some attribute table missing data on the final rom.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We will found glitchs regarding&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Differs in the used palette and emulator palette;&lt;/li&gt;
&lt;li&gt;Use of sprite overlay to increse color's in area;&lt;/li&gt;
&lt;li&gt;Render part of the screen in sprites;&lt;/li&gt;
&lt;li&gt;Attribute table not being fully defined.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Despite encountering several issues, the tool boasts an accuracy rate of over 90%. To be more precise, let's take a closer look:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Title Screens&lt;/th&gt;
&lt;th class="head"&gt;Hits&lt;/th&gt;
&lt;th class="head"&gt;Misses&lt;/th&gt;
&lt;th class="head"&gt;Accuracy&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;618&lt;/td&gt;
&lt;td&gt;134761&lt;/td&gt;
&lt;td&gt;13559&lt;/td&gt;
&lt;td&gt;90.85827939590075 %&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Testing the tool agains a random sample of NES title screens.
I our case is using 618 different images. You can check the more detail
result at &lt;a class="reference external" href="https://gutomaia.net/TylerD/gamelist.html"&gt;TylerD's game title screen list&lt;/a&gt;.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NES Graphs 101&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tiles&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tiles are the building blocks of NES graphics. Each tile is an 8x8 pixel square. They are made of two bitplane, allowing at most 4 colors per tile. A tile can be represented in the screen in two forms, in the background as a Background Tile or in the foreground as a Sprite.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pattern Tables&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pattern tables store the graphical data for each tile used in the game. There are two pattern tables in the NES, each containing 256 tiles. These pattern tables are where developers define the visual appearance of sprites and backgrounds in their games. Usually, games uses one pattern table for the background tiles and the other for the sprites.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Name Tables&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Name tables are an essential part of the NES's graphics system. In simple terms, a name table is a 32x30 grid of 8x8 tiles that represent what Usually
represents the background of the game.&lt;/p&gt;
&lt;p&gt;player sees on the screen during gameplay. However, the NES only has enough memory to store two name tables at once, each representing one screen of gameplay. These name tables are often referred to as nametable 0 and nametable 1.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How It Works&lt;/strong&gt;&lt;/p&gt;
&lt;p class="last"&gt;The NES's graphics hardware fetches data from the name tables and pattern tables to generate the visuals seen on the screen. When the console is powered on or reset, the CPU initializes the name tables with the necessary graphical data. During gameplay, the CPU updates the name tables as needed to reflect changes in the game world.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="nes"></category><category term="6502"></category><category term="nes"></category><category term="python"></category><category term="wedNESday"></category></entry><entry><title>wedNESday #8 - A long delay</title><link href="https://gutomaia.net/wednesday_8.html" rel="alternate"></link><published>2024-04-24T16:20:00-03:00</published><updated>2024-04-24T16:20:00-03:00</updated><author><name>Guto Maia</name></author><id>tag:gutomaia.net,2024-04-24:/wednesday_8.html</id><summary type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="a long time ago" src="https://gutomaia.net/images/a_long_time_ago.webp" /&gt;
&lt;/div&gt;
&lt;div class="section" id="a-long-time-ago"&gt;
&lt;h2&gt;A Long Time Ago&lt;/h2&gt;
&lt;p&gt;It's been a while since my last update, and if you've been visiting this page eagerly awaiting news, thank you for your patience. Let's dive right in. Recently, I've been using the &amp;quot;wedNESday&amp;quot; project to thoroughly test NES emulators and improve them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="in-a-galaxy-far-far-away"&gt;
&lt;h2&gt;In a Galaxy Far …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="a long time ago" src="https://gutomaia.net/images/a_long_time_ago.webp" /&gt;
&lt;/div&gt;
&lt;div class="section" id="a-long-time-ago"&gt;
&lt;h2&gt;A Long Time Ago&lt;/h2&gt;
&lt;p&gt;It's been a while since my last update, and if you've been visiting this page eagerly awaiting news, thank you for your patience. Let's dive right in. Recently, I've been using the &amp;quot;wedNESday&amp;quot; project to thoroughly test NES emulators and improve them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="in-a-galaxy-far-far-away"&gt;
&lt;h2&gt;In a Galaxy Far Far Away&lt;/h2&gt;
&lt;p&gt;Emulators are being tested using a CPU specification derived from &lt;a class="reference external" href="https://github.com/nwidger/nintengo/blob/master/m65go2/instructions_test.go"&gt;Nintego&lt;/a&gt;. Here are the emulators I've been putting through their paces:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ergoadams/arbne"&gt;Arbne&lt;/a&gt;: Discovered in a serendipitous encounter within a &lt;a class="reference external" href="https://www.reddit.com/r/EmuDev/comments/gc5w8w/a_really_bad_nes_emulator_in_python_feedback/"&gt;Reddit thread&lt;/a&gt;, a call for feedback that demands an answer.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jtauber/applepy"&gt;ApplePy&lt;/a&gt;: An Apple 2 emulator by James Tauber, although not a NES emulator, it relies on the 6502 architecture.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/bfirsh/jsnes"&gt;JSnes&lt;/a&gt;: A NES emulator written in Javascript, pivotal for my experiments in nodeNES.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/PyAndy/Py3NES"&gt;Py3NES&lt;/a&gt;: Constructed amidst live streaming sessions, Py3NES offers a fascinating insight into NES emulation, with its entire development journey documented on &lt;a class="reference external" href="https://www.youtube.com/channel/UCT0oEArSloMLL_URLyy2HfA"&gt;YouTube&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mnaberez/py65"&gt;Py65&lt;/a&gt;: A Python-based 6502 emulator, serving as a critical component in the testing arsenal.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jameskmurphy/nes"&gt;Pyntendo&lt;/a&gt;: Implemented also CPython, Pyntendo promises an intriguing exploration into NES emulation.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Torlus/6502.js"&gt;6502js&lt;/a&gt;: Gregory Estrade's 6502 emulator, a very interesting for quest for accuracy and reliability.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Goal is to improve the overwall accuracy&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary-of-results"&gt;
&lt;h2&gt;Summary of Results&lt;/h2&gt;
&lt;p&gt;The following table succinctly summarizes the outcomes gleaned from the 6502 instruction tests:&lt;/p&gt;
&lt;!-- Color profiles for Sphinx. --&gt;
&lt;!-- Has to be used with hacks.css --&gt;
&lt;!-- (https://bitbucket.org/lbesson/web-sphinx/src/master/.static/hacks.css) --&gt;
&lt;!-- (c) Lilian Besson, 2011-2016, https://bitbucket.org/lbesson/web-sphinx/ --&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="13%" /&gt;
&lt;col width="13%" /&gt;
&lt;col width="13%" /&gt;
&lt;col width="13%" /&gt;
&lt;col width="13%" /&gt;
&lt;col width="13%" /&gt;
&lt;col width="13%" /&gt;
&lt;col width="13%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Instruction&lt;/th&gt;
&lt;th class="head"&gt;ApplePy&lt;/th&gt;
&lt;th class="head"&gt;Arbne&lt;/th&gt;
&lt;th class="head"&gt;JSnes&lt;/th&gt;
&lt;th class="head"&gt;Py3NES&lt;/th&gt;
&lt;th class="head"&gt;Py65&lt;/th&gt;
&lt;th class="head"&gt;Pyntendo&lt;/th&gt;
&lt;th class="head"&gt;6502js&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;adc immediate with bcd&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;bcc&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;beq&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;bne&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;brk&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;irq interrupt&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;jsr&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;jsr stack pointer&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;jsr with illegal opcode&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;nmi interrupt&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;php&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;pla&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;pla n flag set&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;pla z flag set&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;plp&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;rst interrupt&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;rti&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;rts&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;sbc immediate with bcd&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;tsx&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;txs&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;You can find an updated version of this table at &lt;a class="reference external" href="https://gutomaia.net/wedNESday/0.0.x/instructions.html#cpu-failed-tests"&gt;ẁedNESday's documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="result-details"&gt;
&lt;h2&gt;Result Details&lt;/h2&gt;
&lt;p&gt;NES emulators typically do not implement the decimal mode, rendering ADC and SEC operations with BCD optional, whereas these functionalities are essential for 6502 emulators. Currently, my focus lies on refining the interrupt specification. That's explain why irq, nmi, and reset interruption tests fail across all emulators.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;PLP Instruction Issue:&lt;/strong&gt; Across all emulators, the PLP instruction presents a notable issue, which will be addressed in further detail in a dedicated topic.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ApplePy Limitations:&lt;/strong&gt; ApplePy lacks implementations for math operations with BCD and interrupts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Arbne Quirk:&lt;/strong&gt; Arbne exhibits a minor issue with the BRK instruction, specifically concerning the return of the Program Counter, resulting in a peculiar plus one offset.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JSnes Challenges:&lt;/strong&gt; JSnes faces challenges with all branch instructions, JSR, and RTS due to issues with instructions that alter the Program Counter position. This may stem from underlying logic in the bridge.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Py3NES BRK Issue:&lt;/strong&gt; Py3NES encounters an issue with the BRK instruction.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Py65 Differences:&lt;/strong&gt; Py65 demonstrates discrepancies in the behavior of jump instructions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pyntendo&lt;/strong&gt;, Pytendo has only a minor issue with invalid opcodes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;6502js Procedure Call:&lt;/strong&gt; The 6502.js emulator encounters issues with the JSR (Jump to Subroutine) and RTS (Return from Subroutine) instructions. These issues impact the proper execution of subroutine calls and returns.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Number of Cycles:&lt;/strong&gt; Across all emulators, I found it necessary to disable cycle checking in certain instructions to ensure proper functionality. I will be publishing a new table documenting these instances where cycle checking had to be skipped.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In response to these findings, I've initiated forks of each emulator to address the some of the identified issues. The goal is to synchronize the behavior of all emulators, ensuring consistency and compatibility. To achieve this, I'm focusing on improving the test cases for instructions such as BRK, JSR, PLP, and RST, which are crucial for accurate emulation.&lt;/p&gt;
&lt;div class="section" id="plp-instruction"&gt;
&lt;h3&gt;PLP Instruction&lt;/h3&gt;
&lt;p&gt;The PLP instruction, short for &amp;quot;Pull Processor Status from Stack,&amp;quot; retrieves the last value from the stack and updates the Status register accordingly. It affects all flags except the Break (B) and Unused (U) flags.&lt;/p&gt;
&lt;p&gt;Essentially, this means that whatever value the B flag had before the PLP execution will remain unchanged afterward, as will the U flag. According to the &lt;a class="reference external" href="https://github.com/nwidger/nintengo/blob/f173d610a4acece3bb01a6564fe0f35b1a0ed7ac/m65go2/instructions_test.go#L1210"&gt;Nintego PLP Test&lt;/a&gt;, if the value 0xFF is pushed onto the stack, PLP will pull 0xCF into the Status register.&lt;/p&gt;
&lt;p&gt;However, giving the Nintengo example, it's worth noting that although fetching the U flag will always return &amp;quot;1&amp;quot;, although the corresponding bit in the status register is now set to 0 (0xCF). Further testing on real hardware may be necessary to validate this behavior.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;STX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;$FF&lt;/span&gt;
&lt;span class="nf"&gt;TXS&lt;/span&gt;
&lt;span class="nf"&gt;PLP&lt;/span&gt;
&lt;span class="nf"&gt;JSR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;print_p_reg&lt;/span&gt;
&lt;span class="nf"&gt;JSR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;print_flags&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="testing-specification"&gt;
&lt;h3&gt;Testing Specification&lt;/h3&gt;
&lt;p&gt;I often emphasize that a good test is built upon a solid specification. Following the principles of Lean Architecture and Model Driven Architecture (MDA), I consider a specification to be effective when it exhibits the following characteristics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Self-contained:&lt;/strong&gt; A good specification should be self-contained, meaning it doesn't rely on any external references. It defines the scope of the problem within itself, providing clear boundaries for testing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Platform Independent:&lt;/strong&gt; A specification should be platform independent, meaning it can be applied uniformly across different environments and architectures. This ensures consistency and compatibility, regardless of the underlying technology stack or infrastructure.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Abstracted:&lt;/strong&gt; A specification should be abstracted, avoiding implementation details or reliance on concrete methods. This ensures flexibility and adaptability, allowing for changes or enhancements without impacting the overall testing framework.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extendable:&lt;/strong&gt; An ideal specification is designed to be extendable, capable of accommodating future requirements or modifications. This flexibility enables the testing framework to evolve alongside the project it supports.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Readable:&lt;/strong&gt; Perhaps most importantly, a specification must be readable by humans. Clear and concise documentation ensures that the intent and requirements of the system under test are easily understood, facilitating collaboration and maintenance efforts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While the CPU specs still lack complete abstraction due to explicit calls to assert methods from the unittest.TestCase mixin, efforts are underway to further abstract these specifications in alignment with these principles.&lt;/p&gt;
&lt;p&gt;Aside from the &lt;cite&gt;abstracted&lt;/cite&gt;, which the CPU specs still lacks since it does explicit calls assert methods from the unittest.TestCase as a mixin.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="nes"></category><category term="6502"></category><category term="nes"></category><category term="python"></category><category term="wedNESday"></category></entry><entry><title>Double Dragon</title><link href="https://gutomaia.net/double_dragon.html" rel="alternate"></link><published>2017-02-22T23:00:00-03:00</published><updated>2017-02-12T13:54:00-02:00</updated><author><name>Guto Maia</name></author><id>tag:gutomaia.net,2017-02-22:/double_dragon.html</id><summary type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="Double Dragon" src="https://gutomaia.net/images/double_dragon.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;Not in the mood to code today, so let's play a classic: Double Dragon. It's hard to explain nowadays what a phenomenal game it was back then. So before reviewing the NES version, which I'm going to play, let's first talk about the game’s history.&lt;/p&gt;
&lt;p&gt;At the end eighties …&lt;/p&gt;</summary><content type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="Double Dragon" src="https://gutomaia.net/images/double_dragon.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;Not in the mood to code today, so let's play a classic: Double Dragon. It's hard to explain nowadays what a phenomenal game it was back then. So before reviewing the NES version, which I'm going to play, let's first talk about the game’s history.&lt;/p&gt;
&lt;p&gt;At the end eighties, there was a Double Dragon machine at the center of every arcade. The game was so popular that it opened up the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Beat_em_up"&gt;beat'em up genre&lt;/a&gt;. Soon enough, arcades were filled with beloved beat ‘em up games like Golden Axe and Final Fight; and then eventually CAPCOM would lead the genre to whole other level. But even by then, in the mid-nineties, brothers Billy and Jimmy Lee—the stars of Double Dragon—would never lose their spot.&lt;/p&gt;
&lt;p&gt;This story was quite simple: a love interest of Billy and Jimmy gets kidnapped by a street gang. Yep,  both brothers are interested in the same girl and—spoiler alert—they fight each other for her at the end of the game. Prior the first stage, a small intro shows henchman's punching and taking the girl away, then the garage door open's up and the music and beat begins. Not exactly an original story, but the game made it feel like a great story; at the least, it was a great eighties story. In fact, there was something about the style that always reminded me of another eighties classic: &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Streets_of_Fire"&gt;Streets of Fire&lt;/a&gt; style. I swear, whenever I played Double Dragon, I always saw Willem Dafoe as the kidnapper; running off with that kidnapped girl over the shoulders.&lt;/p&gt;
&lt;p&gt;All in all, the arcade game was a classic. I’ll never forget the hours I spent waiting to play the game; talking with others about how to best control the elbow smash or how to throw an enemy from a bridge without falling too. I remember that once I had to wait a guy cleanup the coin safe, 'cause coins were getting jammed. It was the main subject among gamers and game magazines.&lt;/p&gt;
&lt;div class="section" id="the-home-version"&gt;
&lt;h2&gt;The HOME version&lt;/h2&gt;
&lt;p&gt;Playing Double Dragon, at home, without needing to &amp;quot;insert coin&amp;quot; was amazing. But there were problems too. For me, I used to have the Master System version as a child. But the Master System missed the thrill. The timing of the game was off (especially compared to the NES version) and it also lacked the action sequences (I know it's related to licensing, but I as a gamer, I didn't care).&lt;/p&gt;
&lt;p&gt;Nevertheless, it was great. And then it got better: &lt;cite&gt;Double Dragon 2 - The Revenge.’ Even just the cover was amazing. It also seemed to share an element with the movie `Big Trouble in Little China&lt;/cite&gt; and, again, &lt;cite&gt;Streets of Fire&lt;/cite&gt;. All in all, it was a lot of fun; the graphics were simple and the arm over the body style was remarkable.&lt;/p&gt;
&lt;p&gt;Then you stomp on with &lt;cite&gt;Double Dragon 3: The Sacred Stones&lt;/cite&gt;. More characters and a new feature: &amp;quot;Once you defeated your bitter enemies join your quest&amp;quot;. Meaning, after you beat a boss you can play with him too. And for sure, it was one of the hardest titles on the NES. It was hard as hell! Dammed stones, why so sacred?&lt;/p&gt;
&lt;p&gt;I think that the NES version is the definitive console version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-king-still-a-king"&gt;
&lt;h2&gt;A King still a King&lt;/h2&gt;
&lt;p&gt;Meanwhile, Final Fight was dominating the arcades in the early nineties and then the Super Nintendo was announced with it listed as a launch title. At the time I thought, &amp;quot;here comes a new Double Dragon.” Sega's had an upstart advantage, not only &lt;cite&gt;Golden Axe&lt;/cite&gt; was Genesis's launch title, but also it comes bundled with Altered Beast. Two beat ‘em up in the launch, Sega was way ahead.&lt;/p&gt;
&lt;p&gt;Capcom, had the chance to help even things for Nintendo, but missed badly. Although the game was a almost perfect arcade conversion in terms of graphics, the lack of two player took away the replayability that NES's Double Dragon had. The sixteen bit's beat ‘em up title was took from Nintendo by Sega's &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Streets_of_Rage"&gt;Streets of Rage&lt;/a&gt; later on. And here we go again, another game with Streets of Fire references. I think I see a pattern.&lt;/p&gt;
&lt;p&gt;This year, we have the launch of &lt;cite&gt;Double Dragon 4&lt;/cite&gt;. Ok, before we go on. Let's pretend they never release either &lt;cite&gt;Double Dragon Neon&lt;/cite&gt; game or the &lt;cite&gt;Double Dragon&lt;/cite&gt; movie. It's perfect stated here Streets of Fire is the official Double Dragon movie and Willem Dafoe the leader of the Black Warriors gang.&lt;/p&gt;
&lt;p&gt;The new adventure of the Lee brother's took place after the events of the DD3 and their sacred as hell stones, which I would never be able to collect. It has all the main features from his predecessors. The 2-player co-op with friend fighting at the end from the first. The remarkable style with the arms over the body from the second. And, finally, the bad-guys-join-the-party-after-you-beat-them feature.&lt;/p&gt;
&lt;p&gt;It took decades for a fourth episode, and all the other beat 'em up greaties never took this step (Golden Axe, Streets of Rage and Final Fight each have only 3 games). Why didn't they? My answer would be, the lack of style, good memories and nostalgia. Because ultimately Double Dragon was the game that created and defines the beat 'em up genre, as well as defines the &amp;quot;2 player&amp;quot; game style of the eighties.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ending-credits-and-bonus-stage"&gt;
&lt;h2&gt;Ending credits and bonus stage&lt;/h2&gt;
&lt;p&gt;I must share the authoring credits of this post with &lt;a class="reference external" href="http://www.blakejharris.com"&gt;Blake J. Harris&lt;/a&gt;. He did more than amazing review on the final draft. He reestructed and extracted the whole essence that was there. Blake is the author of the best-selling &lt;a class="reference external" href="https://www.amazon.com.br/Console-Wars-Nintendo-Defined-Generation/dp/0062276700"&gt;Console Wars&lt;/a&gt; book and made a interview that digs &lt;a class="reference external" href="http://www.slashfilm.com/streets-of-fire-oral-history/"&gt;Streets of Fire history&lt;/a&gt;. There wouldn't be a better reviewer for this post. Also, he is working on a new book about virtual reality.&lt;/p&gt;
&lt;/div&gt;
</content><category term="nes"></category><category term="nes"></category><category term="double dragon"></category><category term="wedNESday"></category><category term="review"></category></entry><entry><title>wedNESday #7 - More than just coding</title><link href="https://gutomaia.net/wednesday_7.html" rel="alternate"></link><published>2017-02-15T23:00:00-02:00</published><updated>2017-02-18T13:54:00-02:00</updated><author><name>Guto Maia</name></author><id>tag:gutomaia.net,2017-02-15:/wednesday_7.html</id><summary type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="more than coding" src="https://gutomaia.net/images/more_than_coding.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;One thing that I noticed on opensorce projects, it's more than just coding. Indeed the code itself is the center on wich everything else related to the project gravitates, but there is lot more. Today made some tweaks on my travis continuos integration, and also had a lot of reading …&lt;/p&gt;</summary><content type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="more than coding" src="https://gutomaia.net/images/more_than_coding.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;One thing that I noticed on opensorce projects, it's more than just coding. Indeed the code itself is the center on wich everything else related to the project gravitates, but there is lot more. Today made some tweaks on my travis continuos integration, and also had a lot of reading to keep up. I had make some proof of concepts related to plugins, and at the end I thought, wow that was very productive, but... wait... I didn't either write or commit a single line of code in the main project. How that could be productive? Did you ever had the same feeling?&lt;/p&gt;
&lt;p&gt;That happens a lot, 'cause you are building the ideia on your head. If you alredy knew, you would be just typing. Programing is much more related to thinking than pressing keys, although hollywood might disagree. In my daily work, my mind must be focused and aimed at the goal. But, in your personal projects, you must have fun along the way, let your mind flow for a while.&lt;/p&gt;
&lt;p&gt;In my opinion, opensource projects are marathons, not short runs. So have fun, appreciate the view, get some small detours. Don't rush and lose your breath, just keep going. If you can't enjoy yourself, how contributors will get inpired?&lt;/p&gt;
&lt;p&gt;And them, as said, there is much more than code. There must be passion doing this.&lt;/p&gt;
&lt;p&gt;Today's post is dedicated to my friend &lt;a class="reference external" href="https://twitter.com/luizf0510"&gt;Luiz Fuhrmeister&lt;/a&gt; who have passed away yesterday, on February 14.&lt;/p&gt;
&lt;div class="section" id="next-wednesday"&gt;
&lt;h2&gt;Next wedNESday&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Have more fun!&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</content><category term="nes"></category><category term="6502"></category><category term="nes"></category><category term="python"></category></entry><entry><title>wedNESday #6 - A bigger blender brain</title><link href="https://gutomaia.net/wednesday_6.html" rel="alternate"></link><published>2017-02-08T23:00:00-02:00</published><updated>2017-02-12T13:54:00-02:00</updated><author><name>Guto Maia</name></author><id>tag:gutomaia.net,2017-02-08:/wednesday_6.html</id><summary type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="Blender Brain" src="https://gutomaia.net/images/blender_bigger_brain.jpg" /&gt;
&lt;p class="caption"&gt;Blender Bigger Brain*&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;On last week's post, I had a &amp;quot;to do&amp;quot; list over the comments of the &amp;quot;upcoming improvements&amp;quot;. So &lt;a class="reference external" href="https://twitter.com/salexkidd"&gt;Toshimitsu Kamei&lt;/a&gt; came to the rescue again with the IO expander stuff. He sent some study material and sugests a small proof of concept just by following some internet …&lt;/p&gt;</summary><content type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="Blender Brain" src="https://gutomaia.net/images/blender_bigger_brain.jpg" /&gt;
&lt;p class="caption"&gt;Blender Bigger Brain*&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;On last week's post, I had a &amp;quot;to do&amp;quot; list over the comments of the &amp;quot;upcoming improvements&amp;quot;. So &lt;a class="reference external" href="https://twitter.com/salexkidd"&gt;Toshimitsu Kamei&lt;/a&gt; came to the rescue again with the IO expander stuff. He sent some study material and sugests a small proof of concept just by following some internet tutorials. He sugests the use of a MCP23017 I2C port expander.&lt;/p&gt;
&lt;p&gt;Then, let me share the links:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.raspberrypi-spy.co.uk/2013/07/how-to-use-a-mcp23017-i2c-port-expander-with-the-raspberry-pi-part-1/"&gt;How To Use A MCP23017 I2C Port Expander With The Raspberry Pi - part 1&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.raspberrypi-spy.co.uk/2013/07/how-to-use-a-mcp23017-i2c-port-expander-with-the-raspberry-pi-part-2/"&gt;How To Use A MCP23017 I2C Port Expander With The Raspberry Pi - part 2&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.raspberrypi-spy.co.uk/2013/07/how-to-use-a-mcp23017-i2c-port-expander-with-the-raspberry-pi-part-3/"&gt;How To Use A MCP23017 I2C Port Expander With The Raspberry Pi - part 3&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://hackaday.com/2011/06/07/working-with-i2c-port-expanders/"&gt;Working with I2C port expanders&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then, let's start reading and connecting wire jumps over the protoboard. I don't think that I will achieve a major breaktru this week, but I do need to improve my hardware skills.&lt;/p&gt;
</content><category term="nes"></category><category term="6502"></category><category term="nes"></category><category term="python"></category><category term="MCP23017"></category><category term="raspberrypi"></category></entry><entry><title>wedNESday #5 - It's alive!</title><link href="https://gutomaia.net/wednesday_5.html" rel="alternate"></link><published>2017-02-01T23:00:00-02:00</published><updated>2017-02-04T13:54:00-02:00</updated><author><name>Guto Maia</name></author><id>tag:gutomaia.net,2017-02-01:/wednesday_5.html</id><summary type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="it's alive" src="https://gutomaia.net/images/blender_terminal.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;First of all, I must thanks &lt;a class="reference external" href="https://twitter.com/salexkidd"&gt;Toshimitsu Kamei&lt;/a&gt;, without him this post wouln't be possible. Some time ago, he helped me up connecting the RasberryPI's GPIO along with &lt;a class="reference external" href="http://datasheets.chipdb.org/Western%20Design/W65C02S.pdf"&gt;W65C02S&lt;/a&gt;. It was fun, although I was kind of clumsy in this meantime, and them now I have to reattach everything. So …&lt;/p&gt;</summary><content type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="it's alive" src="https://gutomaia.net/images/blender_terminal.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;First of all, I must thanks &lt;a class="reference external" href="https://twitter.com/salexkidd"&gt;Toshimitsu Kamei&lt;/a&gt;, without him this post wouln't be possible. Some time ago, he helped me up connecting the RasberryPI's GPIO along with &lt;a class="reference external" href="http://datasheets.chipdb.org/Western%20Design/W65C02S.pdf"&gt;W65C02S&lt;/a&gt;. It was fun, although I was kind of clumsy in this meantime, and them now I have to reattach everything. So, let's do it.&lt;/p&gt;
&lt;div class="section" id="the-ingredients"&gt;
&lt;h2&gt;The Ingredients&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.amazon.com/gp/product/B01CD5VC92/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=B01CD5VC92&amp;amp;linkCode=as2&amp;amp;tag=gutomaia-20&amp;amp;linkId=e9dd7c39ce1445557706ad75cbf52728"&gt;Raspberry PI's 2 or 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Breadboard&lt;/li&gt;
&lt;li&gt;W65C02S&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.amazon.com/Honbay-120pcs-Multicolored-Female-Breadboard/dp/B017NEGTXC"&gt;Wires&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.amazon.com/gp/product/B01CNKXM54/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=B01CNKXM54&amp;amp;linkCode=as2&amp;amp;tag=gutomaia-20&amp;amp;linkId=92cbec6f2c6b0cc63afeaef93116a30b"&gt;GPIO Expansion Board&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You must use a Raspberry PI's 2 or above, due to the number of available GPIO ports. Using the GPIO Expansion Board is optional but highly recommended. The types of wiring that you might use depends if you be using or not the GPIO Expansion Board.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wiring-up"&gt;
&lt;h2&gt;Wiring Up&lt;/h2&gt;
&lt;p&gt;Not really a big deal, however, you need to be carefull and patient. Raspberry PI's GPIO is not so fault tolerant as the Arduino is, any wrong connection on the ground or VCC and you might kill it. About the W65C02S, I'm not so sure, didn't burn any so far.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="breadboard.jpg" src="https://gutomaia.net/images/blender_breadboard.jpg" /&gt;
&lt;p class="caption"&gt;GPIO's connections&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="hello-world"&gt;
&lt;h2&gt;Hello World&lt;/h2&gt;
&lt;p&gt;Now that we got all connected, let's say hello. The following &amp;quot;Hello World&amp;quot; will read the address bus after the reset. When started, 6502 must read content from address 0xfffa, although, anything from 0xfffa to 0xfffe would be nice.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GPIO.setmode(GPIO.BCM)


ADDRESS_PINS = [
    4, 17, 27, 22, 10, 9, 11, 5, 6, 13, 19, 26, 21, 20, 16, 12
]

RESET_PIN = 8
CLOCK_PIN = 7


def terminate(signum, frame):
    GPIO.cleanup()
    sys.exit(0)

def setup():
    # Address pins
    for pin in ADDRESS_PINS:
        GPIO.setup(pin, GPIO.IN, pull_up_down = GPIO.PUD_DOWN)

    # Reset pin
    GPIO.setup(RESET_PIN, GPIO.OUT)

    # Clock PIN (PHI2)
    GPIO.setup(CLOCK_PIN, GPIO.OUT)

    # SIGINT
    signal.signal(signal.SIGINT, terminate)


def reset():
    GPIO.output(RESET_PIN, GPIO.HIGH)
    time.sleep(0.1)
    GPIO.output(RESET_PIN, GPIO.LOW)
    time.sleep(0.1)
    GPIO.output(RESET_PIN, GPIO.HIGH)
    print(&amp;quot;reset complete&amp;quot;)

def send_clock():
    time.sleep(0.1)
    GPIO.output(CLOCK_PIN, GPIO.LOW)
    time.sleep(0.1)
    GPIO.output(CLOCK_PIN, GPIO.HIGH)

def read_address():
    pin_state = &amp;quot;&amp;quot;
    for pin in reversed(ADDRESS_PINS):
        pin_state += str(GPIO.input(pin))

    hex_address = hex(int(pin_state, 2))
    return pin_state, hex_address

def read_address2():
    pins = [int(GPIO.input(pin) for pin in ADDRESS_PINS)]

    state = sum([int(cc) * (2 ** i) for i, cc in enumerate(reversed(pins))])
    return state, hex(state)

def main_loop():
    while True:
        address = read_address()

        input = None
        input = raw_input(&amp;#39;(&amp;quot;reset&amp;quot;, (n)ext, &amp;quot;(r)ead&amp;quot;  [{}]&amp;gt; &amp;#39;.format(address))

        if input == &amp;quot;reset&amp;quot;:
            reset()
        elif input == &amp;quot;r&amp;quot;:
            print(&amp;quot;READ!: [{}]&amp;quot;.format(read_address()))

        else:
            print(&amp;quot;READ!: [{}]&amp;quot;.format(read_address()))
            send_clock()


if __name__ == &amp;quot;__main__&amp;quot;:
    setup()
    reset()
    try:
        main_loop()
    except:
        terminate()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Not much to watch right now. You only be able to reset and check that it is reading the expected address. So far, we just acomplished a overside blinking led demo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="upcomming-improvements"&gt;
&lt;h2&gt;Upcomming Improvements&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The reset routine is not consistent. Sometime it jumps to 0xfff[a-e], sometime it doesn't.&lt;/li&gt;
&lt;li&gt;If you took a closer look on the wiring, you will notice that not all PINs were connected. I know, we are just connecting the address bus. We did not connected the data bus due the lack of available ports. That's why we can only hear from the address bus so far.&lt;/li&gt;
&lt;li&gt;We need to use some IO expander for sending data to address bus and data bus, that way will be using less ports on the Raspberry PI.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="nes"></category><category term="6502"></category><category term="nes"></category><category term="python"></category><category term="raspberrypi"></category></entry><entry><title>wedNESday #4</title><link href="https://gutomaia.net/wednesday_4.html" rel="alternate"></link><published>2017-01-25T23:00:00-02:00</published><updated>2017-01-28T17:35:00-02:00</updated><author><name>Guto Maia</name></author><id>tag:gutomaia.net,2017-01-25:/wednesday_4.html</id><summary type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="Blender Brain" src="https://gutomaia.net/images/blender_brain.jpg" /&gt;
&lt;p class="caption"&gt;Blender Brain*&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="split-and-share"&gt;
&lt;h2&gt;Split and Share&lt;/h2&gt;
&lt;p&gt;I'm splitting the project wedNESday into a guide project. Unfortunelly, it does not have a catch name yet. The goal of this sidekick project is to serve as a lighthouse for thouse who attempt to create an emulator. It's filled with abstract test case scenarios …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="Blender Brain" src="https://gutomaia.net/images/blender_brain.jpg" /&gt;
&lt;p class="caption"&gt;Blender Brain*&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="split-and-share"&gt;
&lt;h2&gt;Split and Share&lt;/h2&gt;
&lt;p&gt;I'm splitting the project wedNESday into a guide project. Unfortunelly, it does not have a catch name yet. The goal of this sidekick project is to serve as a lighthouse for thouse who attempt to create an emulator. It's filled with abstract test case scenarios. Well, for now the sameone I already have on wedNESday (yep, mostly,just copy and clip).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-real-deal"&gt;
&lt;h2&gt;The Real Deal&lt;/h2&gt;
&lt;p&gt;As I had more time, due to a local holiday, I've spent a lot of time with an actual 6502 microprocessor, thanks to &lt;a class="reference external" href="https://twitter.com/salexkidd"&gt;Toshimitsu Kamei&lt;/a&gt;, who bought that for me sended it to Brazil from Japan. The MPU is a &lt;a class="reference external" href="http://datasheets.chipdb.org/Western%20Design/W65C02S.pdf"&gt;W65C02S&lt;/a&gt;. I'm using the RaspberryPi's GPIO to interract with it. So far, haven't done much. Still reading the manual and how to actially send and data and memory addresses. Also dealing with pinout flags, to understand when I should read from data and address and when I should write.&lt;/p&gt;
&lt;div class="section" id="trivia-fact"&gt;
&lt;h3&gt;Trivia fact&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Matt Groening's Futurama showed that Blender uses a 6502 CPU.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Futurama" src="https://gutomaia.net/images/futurama.jpg" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="next-wednesday"&gt;
&lt;h2&gt;Next wedNESday&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Don't know yet. I'll certainly have less time available this week. How about some GUI?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</content><category term="nes"></category><category term="nes"></category><category term="emulator"></category><category term="python"></category></entry><entry><title>wedNESday #3</title><link href="https://gutomaia.net/wednesday_3.html" rel="alternate"></link><published>2017-01-18T23:00:00-02:00</published><updated>2017-01-21T17:34:00-02:00</updated><author><name>Guto Maia</name></author><id>tag:gutomaia.net,2017-01-18:/wednesday_3.html</id><summary type="html">&lt;div class="section" id="goals-and-detours"&gt;
&lt;h2&gt;Goals and Detours&lt;/h2&gt;
&lt;p&gt;One of goals this week was to create a fake PPU, so that we can start testing it and playing with it and create a Pull Request in the py65 project with some tests. Although, while writing some tests in order to reach the first goal, I …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="goals-and-detours"&gt;
&lt;h2&gt;Goals and Detours&lt;/h2&gt;
&lt;p&gt;One of goals this week was to create a fake PPU, so that we can start testing it and playing with it and create a Pull Request in the py65 project with some tests. Although, while writing some tests in order to reach the first goal, I thought that I could do better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="running-some-asm-snippets"&gt;
&lt;h2&gt;Running some ASM snippets&lt;/h2&gt;
&lt;p&gt;For the fake PPU, I need some tests that calls it. All the tests that I had so far, dealed only with CPU. Then using &lt;a class="reference external" href="https://github.com/gutomaia/nesasm_py"&gt;nesasm_py&lt;/a&gt; I've managed to run some ASM code snippets within a test in a very readable way. I took some code snippets, some of them, like
&lt;a class="reference external" href="https://github.com/gutomaia/wedNESday/blob/9d162406bb01144b9339284801f4cd2e5c1ba352/wednesday/tests/nes_snippet_test.py#L104"&gt;load palettes&lt;/a&gt; uses the PPU. Then the detours started.&lt;/p&gt;
&lt;p&gt;Those tests open the possibility to run some book and tutorials codesnippets without much effort. I've started some demos from &lt;a class="reference external" href="http://www.6502.org/tutorials/compare_beyond.html"&gt;6502.org's compare beyond&lt;/a&gt;, now I'm playing with some codesnippets from the book &lt;a class="reference external" href="https://www.amazon.com/Machine-Language-Beginners-Richard-Mansfield/dp/0942386116"&gt;Machine Language for Beginners&lt;/a&gt; by Richard Mansfield.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="divide-and-conquer"&gt;
&lt;h2&gt;Divide and Conquer&lt;/h2&gt;
&lt;p&gt;I though, that not only py65 deserve some pull requests, but those demos might be useful for other projects. I'm thinking in creating kind of a 'guide' project/module just filled with tests in the most generic way. If anyone could think of a catch name, please tweet me!&lt;/p&gt;
&lt;p&gt;As usual, you can checkout the progress at &lt;a class="reference external" href="https://github.com/gutomaia/wedNESday"&gt;wedNESday repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="next-wednesday"&gt;
&lt;h2&gt;Next wedNESday&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It will be a holiday on São Paulo-Brasil, thefore I might have more time to evolve on the PPU.&lt;/li&gt;
&lt;li&gt;Code Snippets from &lt;a class="reference external" href="https://www.amazon.com/Machine-Language-Beginners-Richard-Mansfield/dp/0942386116"&gt;Machine Language for Beginners&lt;/a&gt;'s book.&lt;/li&gt;
&lt;li&gt;Split the tests into a Guide project.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</content><category term="nes"></category><category term="nes"></category><category term="emulator"></category><category term="python"></category></entry><entry><title>wedNESday #2</title><link href="https://gutomaia.net/wednesday_2.html" rel="alternate"></link><published>2017-01-11T23:00:00-02:00</published><updated>2017-01-14T17:34:00-02:00</updated><author><name>Guto Maia</name></author><id>tag:gutomaia.net,2017-01-11:/wednesday_2.html</id><summary type="html">&lt;div class="section" id="keep-up"&gt;
&lt;h2&gt;Keep up&lt;/h2&gt;
&lt;p&gt;I've refactored the tests and extracted to &lt;a class="reference external" href="https://github.com/gutomaia/wedNESday/blob/68e17dff9ec06215c53f05c5069c3c06aadc8816/wednesday/tests/cpu_6502_spec.py"&gt;CPU6502Spec&lt;/a&gt;, and them start playing with py65. Didn't take long to have most of the test working. Now I have the same test spec running with either ApplyPy or Py65 6502, and that's amazing. Although, let's keep in mind that the …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="keep-up"&gt;
&lt;h2&gt;Keep up&lt;/h2&gt;
&lt;p&gt;I've refactored the tests and extracted to &lt;a class="reference external" href="https://github.com/gutomaia/wedNESday/blob/68e17dff9ec06215c53f05c5069c3c06aadc8816/wednesday/tests/cpu_6502_spec.py"&gt;CPU6502Spec&lt;/a&gt;, and them start playing with py65. Didn't take long to have most of the test working. Now I have the same test spec running with either ApplyPy or Py65 6502, and that's amazing. Although, let's keep in mind that the goal is a Ricoh 2A03 CPU, the NES CPU. And that lead us to deal with interrupts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="irq-and-nmi"&gt;
&lt;h2&gt;IRQ and NMI&lt;/h2&gt;
&lt;p&gt;IRQ stands for &amp;quot;Interrupt Request&amp;quot; and NMI for &amp;quot;Non-Masked Interrupt&amp;quot;. As far as I know, and please someone correct me if I got it wrong. Interrupts are used for event handling. On the NES, you have two CPUs (Main and PPU for graphics) that runs in parallel. There fore, to accurately emulate a NES, we need to deal with several race conditional on the hardware. Or, for start, we can make then serial (&lt;a class="reference external" href="https://wiki.nesdev.com/w/index.php/NMI_thread"&gt;NMI Thread&lt;/a&gt; on NESDev gives good tips in NMI only), and be able to run Super Mario Bros.&lt;/p&gt;
&lt;p&gt;As usual, you can checkout the progress at &lt;a class="reference external" href="https://github.com/gutomaia/wedNESday"&gt;wedNESday repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="next-wednesday"&gt;
&lt;h2&gt;Next wedNESday&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create a fake PPU and a memory bridge and try to run a simple waitvblank program.&lt;/li&gt;
&lt;li&gt;Create a pull request with CPUSpec and send to &lt;a class="reference external" href="https://github.com/mnaberez/py65"&gt;py65&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</content><category term="nes"></category><category term="nes"></category><category term="emulator"></category><category term="python"></category></entry><entry><title>wedNESday #1</title><link href="https://gutomaia.net/wednesday_1.html" rel="alternate"></link><published>2017-01-04T23:00:00-02:00</published><updated>2017-01-07T23:00:00-02:00</updated><author><name>Guto Maia</name></author><id>tag:gutomaia.net,2017-01-04:/wednesday_1.html</id><summary type="html">&lt;div class="section" id="forewords"&gt;
&lt;h2&gt;Forewords&lt;/h2&gt;
&lt;p&gt;I've been hacking the NES for quite a long time, and since them, I've always been asked for writing an emulator. Although it was never a priority, everytime a question like that stands, I usually answer: &amp;quot;Why not?&amp;quot;.&lt;/p&gt;
&lt;p&gt;Let's think over. Why should I, and why you should to …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="forewords"&gt;
&lt;h2&gt;Forewords&lt;/h2&gt;
&lt;p&gt;I've been hacking the NES for quite a long time, and since them, I've always been asked for writing an emulator. Although it was never a priority, everytime a question like that stands, I usually answer: &amp;quot;Why not?&amp;quot;.&lt;/p&gt;
&lt;p&gt;Let's think over. Why should I, and why you should to? There are already several good emulators available, why write another one?&lt;/p&gt;
&lt;p&gt;Moreover, googling about the subject &amp;quot;write nes emulator&amp;quot;, there are several good stories. I've put the most relevant links at the bottom. I also recomend you to read them.&lt;/p&gt;
&lt;p&gt;Therefore. What to tell abount NES emulators that haven't already being told? Well, not saying that I do intend to fishish it, but let's explore more the ideia.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="press-start"&gt;
&lt;h2&gt;Press Start&lt;/h2&gt;
&lt;p&gt;In order to write the emulator, we need to keep up with the overall architecture that was involved. For now, let's focus on the CPU. NES had a ‎Ricoh 2A03 CPU with the same instruaction set of the 6502. Since we are talking about code. Let highlight the code
from Niels Widger's &lt;a class="reference external" href="https://github.com/nwidger/nintengo"&gt;Nintengo&lt;/a&gt;. It's very polished, and more important, it's filled with tests. So as a experiment, I've rewrote the tests and used on the James Tauber's &lt;a class="reference external" href="https://github.com/jtauber/applepy"&gt;ApplePy&lt;/a&gt;, most impressive, without mush effort, the test spec payoff, and show how well made ApplePy is.&lt;/p&gt;
&lt;p&gt;You can checkout the progress at &lt;a class="reference external" href="https://github.com/gutomaia/wedNESday"&gt;wedNESday repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="next-wednesday"&gt;
&lt;h2&gt;Next wedNESday&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Get a better understand on how IRQ and NMI works&lt;/li&gt;
&lt;li&gt;try to do the same with &lt;a class="reference external" href="https://github.com/mnaberez/py65"&gt;py65&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwidger.github.io/blog/post/writing-an-nes-emulator-in-go-part-1/"&gt;Writing an NES emulator in Go Part 1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://blog.alexanderdickson.com/javascript-nes-emulator-part-1"&gt;Write a NES Emulator with Javascript Part 1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://blog.alexanderdickson.com/javascript-nes-emulator-part-2"&gt;Write a NES Emulator with Javascript Part 2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://medium.com/&amp;#64;fogleman/i-made-an-nes-emulator-here-s-what-i-learned-about-the-original-nintendo-2e078c9b28fe#.7535jmlgd"&gt;I made an NES emulator Heres what I learned about the original Nintendo&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="nes"></category><category term="nes"></category><category term="emulator"></category><category term="python"></category></entry></feed>