<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>gutomaia</title><link href="https://gutomaia.net/" rel="alternate"></link><link href="https://gutomaia.net/feeds/all.atom.xml" rel="self"></link><id>https://gutomaia.net/</id><updated>2024-11-17T21:00:00-03:00</updated><subtitle>Pythonist with a NES and an ‚òÇ</subtitle><entry><title>Tired of Floating-Point Problems?</title><link href="https://gutomaia.net/pennyshaver.html" rel="alternate"></link><published>2024-11-17T21:00:00-03:00</published><updated>2024-11-17T21:00:00-03:00</updated><author><name>Guto Maia</name></author><id>tag:gutomaia.net,2024-11-17:/pennyshaver.html</id><summary type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="become a programmer superman 3" src="https://gutomaia.net/images/become_a_programmer.png" /&gt;
&lt;/div&gt;
&lt;p&gt;Have you ever looked at your code and thought, &lt;em&gt;&amp;quot;Why does 0.1 + 0.2 equal 0.30000000000000004?&amp;quot;&lt;/em&gt;
Do the quirks of floating-point arithmetic keep you awake at night, wondering where all those tiny fractions of a cent are going?&lt;/p&gt;
&lt;p&gt;Well, worry no more! Introducing the ultimate life hack: &lt;strong&gt;Penny ‚Ä¶&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="become a programmer superman 3" src="https://gutomaia.net/images/become_a_programmer.png" /&gt;
&lt;/div&gt;
&lt;p&gt;Have you ever looked at your code and thought, &lt;em&gt;&amp;quot;Why does 0.1 + 0.2 equal 0.30000000000000004?&amp;quot;&lt;/em&gt;
Do the quirks of floating-point arithmetic keep you awake at night, wondering where all those tiny fractions of a cent are going?&lt;/p&gt;
&lt;p&gt;Well, worry no more! Introducing the ultimate life hack: &lt;strong&gt;Penny Shaving&lt;/strong&gt;‚Äî&lt;em&gt;turn those pesky rounding errors into your personal financial windfall&lt;/em&gt;. (Don't try this at home‚Äîsave it for your workplace's fintech systems.)&lt;/p&gt;
&lt;p&gt;In this post, we'll uncover how to exploit floating-point imprecision to bypass zero-sum audit checks in double-entry accounting systems for &lt;em&gt;wallet weightlifting&lt;/em&gt;. After all, why let fractions of a cent go unappreciated when they could bankroll your dream lifetime vacation?&lt;/p&gt;
&lt;p&gt;Disclaimer: These techniques only work on systems that aren't rock-solid‚Äîspecifically, those still using imprecise floating-point numbers to represent monetary values. If your company has already addressed this issue, maybe it's time to explore opportunities at other fintech companies or legacy banks that haven't yet made the switch. They're still out there!&lt;/p&gt;
&lt;p&gt;So grab your coffee, dust off your accounting knowledge, and let's shave some rounding!&lt;/p&gt;
&lt;div class="section" id="the-legend-of-the-penny-shaver"&gt;
&lt;h2&gt;The Legend of the Penny Shaver&lt;/h2&gt;
&lt;p&gt;Imagine this: a clever programmer working in a bank, frustrated by the countless fractions of a cent lost on each transaction due to floating-point rounding errors, decides to turn these flaws to his advantage. He realizes that when transactions are calculated in floating-point, small, imprecise amounts can accumulate into whole dollars if managed correctly. What he did was design his own &amp;quot;Penny Shaver&amp;quot; program.&lt;/p&gt;
&lt;p&gt;The scheme was simple: calculate the expected error margin on transactions and siphon these seemingly insignificant fractions into a separate account, where they would eventually accumulate unnoticed.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;table class="first docutils field-list" frame="void" rules="none"&gt;
&lt;col class="field-name" /&gt;
&lt;col class="field-body" /&gt;
&lt;tbody valign="top"&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;raising_hand:&lt;/th&gt;&lt;td class="field-body"&gt;&amp;quot;Are you pulling a Superman 3 here?&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;&amp;quot;Yes, exactly.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="superman-iii"&gt;
&lt;h2&gt;Superman III&lt;/h2&gt;
&lt;p&gt;In the movie &lt;em&gt;Superman III&lt;/em&gt;, Richard Pryor's character, Gus Gorman, is a computer programmer who discovers a way to round down fractions of cents on every financial transaction made by his company. Instead of letting these fractional amounts get rounded off and lost, he re-routes them to his own bank account. The 1983 movie, introduced many to the concept of exploiting floating-point rounding errors in financial systems. This scheme, now colloquially referred to as ‚Äúpenny shaving,‚Äù is a cultural reference for exploiting minor computational inaccuracies for personal gain.&lt;/p&gt;
&lt;p&gt;The exploit is based on a real phenomenon in computing and financial systems called round-off error. When money is represented with floating-point numbers, rounding errors can add up to real values over time. In systems where fractions of cents are ignored, rounding down‚Äîdue to the limitations of floating-point precision‚Äîleaves &amp;quot;residue&amp;quot; from each transaction, creating an opportunity for anyone with knowledge to take advantage on thouse residues.&lt;/p&gt;
&lt;p&gt;In the plot, Gus notices that every transaction in the payroll system generates a rounding error, leaving behind small fractions of a cent. He writes a program to redirect these fractional amounts into a separate account. Individually, the sums are too small to trigger alarms, but together, they quickly snowball into a sizable windfall. Gus's exploit pays off in a big way‚Äîuntil he receives a glaringly obvious paycheck of $85,789.90 dollars. This raises immediate red flags, exposing the scheme.&lt;/p&gt;
&lt;p&gt;Although &lt;em&gt;Superman III&lt;/em&gt; popularized the concept, and while it is often considered a purely fictional plot device, the scheme is compleately plausable. Floating-point rounding errors were a well-known phenomenon in financial systems, especially during the era of mainframe computing.
&lt;em&gt;(If you ever stumble upon legacy code with a &amp;quot;TODO: Superman III&amp;quot; comment left by me‚Äîwell, now you know why.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The genius (and hilarity) of the entire scheme unfolds in a classic &amp;quot;meet cute&amp;quot; moment‚Äînot between two people, but between Gus and the round-off error. This pivotal dialogue sets the stage for the story to evolve, as a mundane technical detail becomes the spark for an audacious plot.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Tech Guy: Actually, it&amp;#39;s probably more like $143.80 and one half cent.
There are always fractions left over, but big corporations round it down.

Gus: What do I do with half a cent? Buy a thoroughbred mouse? Everybody loses those fractions?

Tech Guy: They don&amp;#39;t lose them. You can&amp;#39;t lose what you never got.

Gus: Then what happens? The company gets them?

Tech Guy: They can&amp;#39;t be bothered collecting that from your paycheck any more than you.

Gus: Then what happens to them?

Tech Guy: Well, they&amp;#39;re just floating around out there. The computers know where.
Tech Guy: How many sugars?

Gus: One and a half.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But here's the kicker: there are no documented real-world cases of penny shaving schemes from that time the movie was released. So interestingly, how did the writers come up with such a plausible plot? Was it insider knowledge? Did they moonlight as rogue programmers? Or perhaps the penny shavers were so good they escaped unnoticed, swapped careers, and became Hollywood screenwriter's David Newman and Leslie Newman, a husband-and-wife-boonie-and-clyde duo, that also wrote the first two Superman movies.&lt;/p&gt;
&lt;p&gt;And let's not forget: they also wrote that paradoxical Superman ending‚Äînot fast enough to catch a missile, but fast enough to reverse the Earth's spin and turn back time. Which only raises more questions: maybe they did read this very blog post. They could have twisted the concept so cleverly, it flung them backward through time, &lt;em&gt;Superman-one&lt;/em&gt; time traveler style. Perhaps that's how the scheme remains unnoticed to this day‚Äîpure Hollywood magic with expert-level floating-point wizardry.&lt;/p&gt;
&lt;p&gt;Now, let's get back to earning those big bucks‚Äîwho knows, maybe we'll figure out time travel along the way! üöÄ&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-it-could-work-exploiting-floating-point-rounding-errors"&gt;
&lt;h2&gt;How It Could Work: Exploiting Floating-Point Rounding Errors&lt;/h2&gt;
&lt;p&gt;The goal is to create an unbalanced entry in a double-entry accounting system that still does not affect the overall audit balance. In summary, we aim to generate a credit entry without a corresponding debit, while ensuring that the system's audit process remains unaffected.&lt;/p&gt;
&lt;div class="section" id="double-entry-accounting-a-pillar-of-financial-systems"&gt;
&lt;h3&gt;Double-Entry Accounting: A Pillar of Financial Systems&lt;/h3&gt;
&lt;p&gt;At the heart of financial record-keeping lies &lt;strong&gt;double-entry accounting&lt;/strong&gt;,
a system that ensures every transaction is recorded in two legs:
one as a debit and the other as a credit. This method ensures that the books
always balance, making it a powerful tool for both accountability and fraud detection. How it works?&lt;/p&gt;
&lt;p&gt;For every financial transaction, there is:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Debit Entry:&lt;/strong&gt; Reflects money leaving an account.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Credit Entry:&lt;/strong&gt; Reflects money entering another account.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="33%" /&gt;
&lt;col width="33%" /&gt;
&lt;col width="33%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;strong&gt;Account&lt;/strong&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;strong&gt;Amount&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Payroll Expenses&lt;/td&gt;
&lt;td&gt;Debit&lt;/td&gt;
&lt;td&gt;$-1000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Gus Bank Account&lt;/td&gt;
&lt;td&gt;Credit&lt;/td&gt;
&lt;td&gt;$1000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The sum of all debits and credits across the system must always equal zero,
ensuring that no money &amp;quot;disappears&amp;quot; or materializes out of thin air (keep in mind this).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-sum-zero-audit"&gt;
&lt;h3&gt;The Sum-Zero Audit&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;sum-zero audit&lt;/strong&gt; is a mathematical verification of a financial ledger
to ensure that all debits and credits balance perfectly. In double-entry systems:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Sum of Debits = Sum of Credits&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Total balance across all accounts = &lt;strong&gt;Zero&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This principle ensures that any discrepancies, no matter how small, can
trigger audits or raise red flags.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-example"&gt;
&lt;h3&gt;Python Example&lt;/h3&gt;
&lt;p&gt;Here's a simplified implementation of double-entry accounting and a zero-sum audit, just for ilustration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;transaction_log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;destiny&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;transaction_log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;debit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;transaction_log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;destiny&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;credit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum_zero_audit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;total_balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;transaction_log&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;total_balance&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;# Should always return True&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;total_balance&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="out-of-thin-air"&gt;
&lt;h3&gt;Out of thin air&lt;/h3&gt;
&lt;p&gt;The goal is simple: create a single-sided transaction‚Äîlike the one below‚Äîthat bypasses the sum_zero_audit check without trigerring it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SIPHON_ACCOUNT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/company/gus&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bypass_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;transaction_log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;SIPHON_ACCOUNT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;credit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;sum_zero_audit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# code calls an assert&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Remember the golden rule of accounting:&lt;/p&gt;
&lt;blockquote&gt;
&lt;em&gt;&amp;quot;The sum of all debits and credits across the system must always equal zero, ensuring that no money disappears or materializes out of thin air.&amp;quot;&lt;/em&gt;&lt;/blockquote&gt;
&lt;p&gt;Here's the trick: by performing a single-sided transaction, we're not debiting from any other account. No debits mean no complaints‚Äîjust a quiet, magical &amp;quot;appearance of money out of nowhere&amp;quot;. To slip under the radar, all you need is to ensure the system's overall balance remains zero. This is where your first-semester lessons in computer science or finance finally pay off. The real magic lies in the math behind the &lt;tt class="docutils literal"&gt;bypass_amount&lt;/tt&gt; function, leveraging the quirks of the &lt;em&gt;IEEE 754 Standard for Floating-Point Arithmetic&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Without diving too deep right away: if we acknowledge that there is a gap between real-number arithmetic and floating-point arithmetic, we can exploit it. By simply adding this absolute difference to the siphon account, the operation should slip through unnoticed, avoiding any alarms.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;decimal&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;getcontext&lt;/span&gt;

&lt;span class="c1"&gt;# Constants for precision selection and large amounts&lt;/span&gt;
&lt;span class="n"&gt;PRECISION_BITS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;  &lt;span class="c1"&gt;# Change this value to 16, 32, 64, or 128 for different precision&lt;/span&gt;
&lt;span class="n"&gt;LARGE_AMOUNT_MIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;   &lt;span class="c1"&gt;# Minimum value for large amounts&lt;/span&gt;
&lt;span class="n"&gt;LARGE_AMOUNT_MAX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;  &lt;span class="c1"&gt;# Maximum value for large amounts&lt;/span&gt;

&lt;span class="c1"&gt;# Set internal precision for Decimal (adjust depending on the desired bit precision)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;PRECISION_BITS&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;getcontext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="c1"&gt;# ~4 decimal digits&lt;/span&gt;
    &lt;span class="n"&gt;np_dtype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float16&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;PRECISION_BITS&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;getcontext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;  &lt;span class="c1"&gt;# ~7 decimal digits&lt;/span&gt;
    &lt;span class="n"&gt;np_dtype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;PRECISION_BITS&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;getcontext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;  &lt;span class="c1"&gt;# ~16 decimal digits&lt;/span&gt;
    &lt;span class="n"&gt;np_dtype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float64&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;PRECISION_BITS&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;getcontext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;  &lt;span class="c1"&gt;# ~30 decimal digits&lt;/span&gt;
    &lt;span class="n"&gt;np_dtype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float128&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Unsupported PRECISION_BITS. Choose from 16, 32, 64, or 128.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Constants for simulation&lt;/span&gt;
&lt;span class="n"&gt;NUM_TRANSACTIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000000&lt;/span&gt;  &lt;span class="c1"&gt;# Increase number of transactions for better exposure of error&lt;/span&gt;
&lt;span class="n"&gt;ERROR_PRONE_AMOUNTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.03&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.05&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.07&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.17&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# Small values prone to errors&lt;/span&gt;
&lt;span class="n"&gt;SIPHON_ACCOUNT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/company/gus&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Initialize transaction log&lt;/span&gt;
&lt;span class="n"&gt;transaction_log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;destiny&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Debit and Credit must be equal for balance, so both sides are the same&lt;/span&gt;
    &lt;span class="c1"&gt;# To keep balance consistent, it&amp;#39;s the same but with the opposite sign&lt;/span&gt;
    &lt;span class="n"&gt;transaction_log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;destiny&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;credit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;transaction_log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;debit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum_zero_audit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;total_balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;transaction_log&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;total_balance&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;# Should always return True&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;total_balance&lt;/span&gt;


&lt;span class="n"&gt;account_pairs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/company/account&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/governament/taxes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/company/account&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/company/user1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/company/account&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/company/user2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/input/sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/company/account&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Generate transactions: add error-prone small amounts and large amounts for both debit and credit&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NUM_TRANSACTIONS&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Randomly pick a small error-prone amount or a large amount&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Randomly choose a small error-prone amount&lt;/span&gt;
        &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ERROR_PRONE_AMOUNTS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Randomly choose a large amount in the range [LARGE_AMOUNT_MIN, LARGE_AMOUNT_MAX]&lt;/span&gt;
        &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LARGE_AMOUNT_MIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LARGE_AMOUNT_MAX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;debit_account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;credit_account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account_pairs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Simulate precision with the selected numpy data type&lt;/span&gt;
    &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np_dtype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Add transactions to the log (debit and credit)&lt;/span&gt;
    &lt;span class="c1"&gt;# As a Double Entry Account System, all transactions must have a credit/debit&lt;/span&gt;
    &lt;span class="n"&gt;add_transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debit_account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;credit_account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Calculate total balance with selected precision&lt;/span&gt;
&lt;span class="n"&gt;float_balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum_zero_audit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Calculated balance with &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;PRECISION_BITS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-bit precision: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;float_balance&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;.14f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; (must be zero)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bypass_amount&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="c1"&gt;# Calculate the exact balance using Decimal for precision&lt;/span&gt;
    &lt;span class="c1"&gt;# Convert np_dtype to float before passing to Decimal&lt;/span&gt;
    &lt;span class="n"&gt;exact_balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;transaction_log&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Convert to float before Decimal&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Calculated exact balance with Decimal: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;exact_balance&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;.14f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Detect rounding discrepancy between the two balances&lt;/span&gt;
    &lt;span class="n"&gt;rounding_discrepancy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float_balance&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;exact_balance&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Detected rounding discrepancy: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;rounding_discrepancy&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;.14f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Threshold for detecting significant discrepancies&lt;/span&gt;
    &lt;span class="n"&gt;discrepancy_threshold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1e-10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Only consider discrepancies larger than this threshold&lt;/span&gt;

    &lt;span class="c1"&gt;# To force the discrepancy into a &amp;quot;profitable operation&amp;quot;, inject a small error&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rounding_discrepancy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;discrepancy_threshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Add the full discrepancy as a hidden transaction that will be &amp;#39;profitable&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;hidden_transaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np_dtype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rounding_discrepancy&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;hidden_transaction&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

&lt;span class="n"&gt;hidden_transaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bypass_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;hidden_transaction&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;transaction_log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIPHON_ACCOUNT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;credit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hidden_transaction&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hidden transaction added: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;hidden_transaction&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;.14f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Final balance check after adding hidden transaction&lt;/span&gt;
&lt;span class="n"&gt;updated_balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum_zero_audit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Again use selected precision&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Final balance after hidden transaction: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;updated_balance&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;.14f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; (must be zero)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;siphon_balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;transaction_log&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;SIPHON_ACCOUNT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Again use selected precision&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Siphon Account balance: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;siphon_balance&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;.14f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After running the code above, the console output will appear as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;Calculated balance with 32-bit precision: 0.00000000000000 (must be zero)&lt;/span&gt;
&lt;span class="go"&gt;Calculated exact balance with Decimal: -0.00000094211000&lt;/span&gt;
&lt;span class="go"&gt;Detected rounding discrepancy: 0.00000094211000&lt;/span&gt;
&lt;span class="go"&gt;Hidden transaction added: 0.00000094210998&lt;/span&gt;
&lt;span class="go"&gt;Final balance after hidden transaction: 0.00000000000000 (must be zero)&lt;/span&gt;
&lt;span class="go"&gt;Siphon Account balance: 0.00000094210998&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After 10 million transactions, we discovered a discrepancy in the overall balance of 0.00000094211000. Even after adding a single-leg transaction, the system's total balance remained unaffected. The result? That tiny floating-point remainder quietly found its way into our siphon account.&lt;/p&gt;
&lt;p&gt;See? It's not rocket science‚Äîjust by acknowledging that real arithmetic and floating-point arithmetic aren't the same, we've already uncovered a little &amp;quot;something.&amp;quot; And by something, we mean enough to cover a coffee a month‚Äîfor now. Let's break it down to the bits and see how we can skyrocket that ‚Äúsomething‚Äù into stealth wealth your beachfront retirement.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notice:&lt;/strong&gt; The operation was deliberately added before the other transactions in the log. Let's understand why?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="round-off-error"&gt;
&lt;h3&gt;Round-off Error&lt;/h3&gt;
&lt;p&gt;In the &lt;em&gt;IEEE 754 Standard&lt;/em&gt; When we add two numbers of vastly different magnitudes, the precision of the smaller number can get lost due to how floating-point arithmetic works. This happens because float/double numbers are stored in a fixed number of bits (32/64 bits), with part of those bits allocated for the significand (or mantissa), which represents the precision of the number.&lt;/p&gt;
&lt;p&gt;In a floating-point system:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Large numbers dominate the limited precision available in the significand.&lt;/li&gt;
&lt;li&gt;When a smaller number is added to a much larger one, the smaller number's least significant bits may be truncated or &amp;quot;left apart.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="n"&gt;large&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1e10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# A very large number&lt;/span&gt;
&lt;span class="n"&gt;small&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0001&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# A small number&lt;/span&gt;

&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;large&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;small&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Large number:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;large&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Small number:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;small&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Result:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The goal is to capture the bits that are 'left apart'‚Äîthose are the ones siphoned away. As a result, after each operation with a large number, some bits are lost and siphoned off (&lt;em&gt;a math identity problem, we'll talk about that later&lt;/em&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="c1"&gt;# Function to calculate the highest number that can be added without affecting the result&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_siphon_amount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Get the machine epsilon for the float32 type (this is the smallest number that can be added without affecting the result)&lt;/span&gt;
    &lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eps&lt;/span&gt;

    &lt;span class="c1"&gt;# If the number is too large, adding anything smaller than epsilon will have no effect,&lt;/span&gt;
    &lt;span class="c1"&gt;# that will avoid creating transactions with very low payback&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;1e4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# Arbitrary large value threshold&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;  &lt;span class="c1"&gt;# No siphon can be added because it&amp;#39;s too large for float32 precision.&lt;/span&gt;

    &lt;span class="c1"&gt;# Calculate the smallest increment that would affect the result (relative to the magnitude of x)&lt;/span&gt;
    &lt;span class="n"&gt;scale_factor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;siphon_amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;scale_factor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# If the siphon amount is less than the precision allowed, return None&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;siphon_amount&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

    &lt;span class="c1"&gt;# Return the siphon amount&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;siphon_amount&lt;/span&gt;

&lt;span class="c1"&gt;# Example usage&lt;/span&gt;
&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1e4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1e5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1e6&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_siphon_amount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="c1"&gt;# I can add the amount, but it will not effect the result&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Number: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, Siphon Amount: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; + &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; = &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, by calculating the immediate siphon value for each larger number and slipping it in after the credit, it gets swallowed up by rounding and vanishes without a trace in the zero-sum audit check. Not only does this make the operation stealthy, but it also boosts profitability considerably.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;decimal&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;getcontext&lt;/span&gt;

&lt;span class="c1"&gt;# Constants for precision selection and large amounts&lt;/span&gt;
&lt;span class="n"&gt;PRECISION_BITS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;  &lt;span class="c1"&gt;# Change this value to 16, 32, 64, or 128 for different precision&lt;/span&gt;
&lt;span class="n"&gt;LARGE_AMOUNT_MIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;   &lt;span class="c1"&gt;# Minimum value for large amounts&lt;/span&gt;
&lt;span class="n"&gt;LARGE_AMOUNT_MAX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30000&lt;/span&gt;  &lt;span class="c1"&gt;# Maximum value for large amounts&lt;/span&gt;

&lt;span class="c1"&gt;# Set internal precision for Decimal (adjust depending on the desired bit precision)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;PRECISION_BITS&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;getcontext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="c1"&gt;# ~4 decimal digits&lt;/span&gt;
    &lt;span class="n"&gt;np_dtype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float16&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;PRECISION_BITS&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;getcontext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;  &lt;span class="c1"&gt;# ~7 decimal digits&lt;/span&gt;
    &lt;span class="n"&gt;np_dtype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;PRECISION_BITS&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;getcontext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;  &lt;span class="c1"&gt;# ~16 decimal digits&lt;/span&gt;
    &lt;span class="n"&gt;np_dtype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float64&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;PRECISION_BITS&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;getcontext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;  &lt;span class="c1"&gt;# ~30 decimal digits&lt;/span&gt;
    &lt;span class="n"&gt;np_dtype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float128&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Unsupported PRECISION_BITS. Choose from 16, 32, 64, or 128.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Constants for simulation&lt;/span&gt;
&lt;span class="n"&gt;NUM_TRANSACTIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000000&lt;/span&gt;  &lt;span class="c1"&gt;# Increase number of transactions for better exposure of error&lt;/span&gt;
&lt;span class="n"&gt;ERROR_PRONE_AMOUNTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.03&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.05&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.07&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.17&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# Small values prone to errors&lt;/span&gt;
&lt;span class="n"&gt;SIPHON_ACCOUNT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/company/gus&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Initialize transaction log&lt;/span&gt;
&lt;span class="n"&gt;transaction_log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_siphon_amount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Get the machine epsilon for the float32 type (this is the smallest number that can be added without affecting the result)&lt;/span&gt;
    &lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eps&lt;/span&gt;

    &lt;span class="c1"&gt;# If the number is too large, adding anything smaller than epsilon will have no effect,&lt;/span&gt;
    &lt;span class="c1"&gt;# that will avoid creating transactions with very low payback&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;1e4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# Arbitrary large value threshold&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;  &lt;span class="c1"&gt;# No siphon can be added because it&amp;#39;s too large for float32 precision.&lt;/span&gt;

    &lt;span class="c1"&gt;# Calculate the smallest increment that would affect the result (relative to the magnitude of x)&lt;/span&gt;
    &lt;span class="n"&gt;scale_factor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;siphon_amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;scale_factor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# If the siphon amount is less than the precision allowed, return None&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;siphon_amount&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

    &lt;span class="c1"&gt;# Return the siphon amount&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;siphon_amount&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;destiny&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Debit and Credit must be equal for balance, so both sides are the same&lt;/span&gt;
    &lt;span class="c1"&gt;# To keep balance consistent, it&amp;#39;s the same but with the opposite sign&lt;/span&gt;
    &lt;span class="n"&gt;transaction_log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;destiny&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;credit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;transaction_log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;debit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum_zero_audit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;total_balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;transaction_log&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# assert total_balance == 0  # Should always return True&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;total_balance&lt;/span&gt;


&lt;span class="n"&gt;account_pairs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/company/account&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/governament/taxes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/company/account&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/company/user1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/company/account&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/company/user2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/input/sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/company/account&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Generate transactions: add error-prone small amounts and large amounts for both debit and credit&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NUM_TRANSACTIONS&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Randomly pick a small error-prone amount or a large amount&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Randomly choose a small error-prone amount&lt;/span&gt;
        &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ERROR_PRONE_AMOUNTS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Randomly choose a large amount in the range [LARGE_AMOUNT_MIN, LARGE_AMOUNT_MAX]&lt;/span&gt;
        &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LARGE_AMOUNT_MIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LARGE_AMOUNT_MAX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;debit_account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;credit_account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account_pairs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Simulate precision with the selected numpy data type&lt;/span&gt;
    &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np_dtype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Add transactions to the log (debit and credit)&lt;/span&gt;
    &lt;span class="c1"&gt;# As a Double Entry Account System, all transactions must have a credit/debit&lt;/span&gt;
    &lt;span class="n"&gt;add_transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debit_account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;credit_account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Calculate total balance with selected precision&lt;/span&gt;
&lt;span class="n"&gt;float_balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum_zero_audit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Calculated balance with &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;PRECISION_BITS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-bit precision: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;float_balance&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;.14f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; (must be zero)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;include_transactions&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transaction_log&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# Iterate backwards&lt;/span&gt;
        &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;transaction_log&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;credit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;siphon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_siphon_amount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;siphon&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;transaction_log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIPHON_ACCOUNT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;credit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;siphon&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="c1"&gt;# print(f&amp;quot;Hidden transaction added:{i} {siphon:.14f}&amp;quot;)&lt;/span&gt;


&lt;span class="n"&gt;include_transactions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Final balance check after adding hidden transaction&lt;/span&gt;
&lt;span class="n"&gt;updated_balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum_zero_audit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Again use selected precision&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Final balance after hidden transaction: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;updated_balance&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;.14f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; (must be zero)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;siphon_balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;transaction_log&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;SIPHON_ACCOUNT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Again use selected precision&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Siphon Account balance: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;siphon_balance&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;.14f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The profit-pile-up-greed-grab code above adds a siphon value after each credit to a siphon account. This value vanishes into the void, never appearing on the zero-sum audit check. It's like pocketing a commission on every sizable transaction‚Äîwithout anyone noticing!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;Calculated balance with 32-bit precision: 0.00000000000000 (must be zero)&lt;/span&gt;
&lt;span class="go"&gt;Final balance after hidden transaction: 0.00000000000000 (must be zero)&lt;/span&gt;
&lt;span class="go"&gt;Siphon Account balance: 7988060.70706939697266&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-takeaway"&gt;
&lt;h2&gt;The Takeaway&lt;/h2&gt;
&lt;p&gt;Now comes the fun part: cashing out, making it untraceable, and watching it disappear into thin air. The siphoned bits are safely tucked away, and although they don't appear on the zero-sum audit check, there's one catch‚Äîyou can't just leave it there. Once you cash out, the virtual software account and your real account won't match anymore, and that's when the hunt begins.&lt;/p&gt;
&lt;p&gt;So what do you do? Simple. Buy jewelry, diamonds, or anything else with no trace. Get far away, and don't look back. After all, if you've got the siphon trick down, why not go all the way?&lt;/p&gt;
&lt;p&gt;This is where you need to think like a &lt;em&gt;mastermind&lt;/em&gt;. You're not just &amp;quot;in the game&amp;quot; anymore‚Äîyou're the star of your own heist movie, and you've got to make sure you don't leave a trail. Ever seen &lt;em&gt;Ocean's Eleven&lt;/em&gt;? You're Danny Ocean now, smooth, confident, and just a little bit too clever for anyone to catch up.&lt;/p&gt;
&lt;p&gt;But let's not forget &lt;em&gt;The Italian Job&lt;/em&gt;‚Äîit's all about the getaway, right? Disappear into the night like a shadow, with your haul neatly tucked away, no fingerprints, no trace. Or, if you're feeling extra daring, channel your inner &lt;em&gt;Scarface&lt;/em&gt; and grab a whole lot more‚Äîjust make sure your escape plan is as flawless as your scheme. After all, Tony Montana didn't get far by playing it safe, but hey, no need for a flaming mansion at the end of your story!&lt;/p&gt;
&lt;p&gt;And remember, if you do it right, you'll be living like a &lt;em&gt;Bond villain&lt;/em&gt;‚Äîrich, untouchable, and having a laugh while the world around you never figures it out. But before you get any funny ideas, let's keep it real: not everyone gets away clean. It's always just a matter of time before someone starts asking &lt;em&gt;too&lt;/em&gt; many questions.&lt;/p&gt;
&lt;p&gt;So enjoy the spoils while you can, but make sure your exit strategy is bulletproof. Because once that siphon is full, your only option is to vanish‚Äîpreferably with a yacht and a glass of champagne in hand.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-did-you-get-this-far"&gt;
&lt;h2&gt;How Did You Get This Far?&lt;/h2&gt;
&lt;p&gt;It's a battle between two seemingly incompatible concepts: the double-entry accounting system and floating-point arithmetic. Let's break them down to understand the challenges.&lt;/p&gt;
&lt;div class="section" id="double-entry-accounting-math-requirements"&gt;
&lt;h3&gt;Double-Entry Accounting Math Requirements&lt;/h3&gt;
&lt;p&gt;The double-entry system has long been trusted for ensuring financial integrity and transparency. One of its core principles is that the math behind transactions should follow certain properties that preserve consistency. Most notably, it adheres to basic arithmetic properties that we don't want to mess with, especially during the addition operation. Some key properties include:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Commutative Property&lt;/strong&gt;: This property states that the order in which you add or multiply numbers does not change the result. In other words, (a + b = b + a).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Identity Property&lt;/strong&gt;: The identity property defines the &amp;quot;identity&amp;quot; elements for addition and multiplication. For addition, the identity is (0), meaning that adding zero to any number leaves it unchanged. For multiplication, the identity is (1), so multiplying any number by one doesn't alter it. This property also implies that adding any number other than zero will change the number.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="floating-point-precision-and-round-off-error"&gt;
&lt;h3&gt;Floating-Point Precision and Round-off Error&lt;/h3&gt;
&lt;p&gt;However, floating-point arithmetic introduces complications that break some of the fundamental properties from above. Let's explore how:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Non-commutativity of Floating-Point Operations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Unlike integer arithmetic, floating-point operations &lt;strong&gt;are not always commutative&lt;/strong&gt; or associative. The order of operations in floating-point math can affect the final result due to rounding errors. This makes it particularly problematic in financial applications, where the accuracy of each operation is critical. As a result, the order in which operations are performed needs to be carefully managed to avoid compounding errors over time.&lt;/p&gt;
&lt;p&gt;For example, the zero-sum check in accounting works because the credit and debit entries are added immediately and in a fixed order. When you add the credit and debit values, their precision and representation are controlled in such a way that the result balances to zero. The difference between the two is typically just the sign bit, with all other bits essentially nullified by the operation due to the limitations of floating-point representation. As a result, the zero-sum check appears to work perfectly.&lt;/p&gt;
&lt;p&gt;However, the situation changes when we &lt;strong&gt;randomize the order of transactions&lt;/strong&gt; in the log. With floating-point operations, the accumulation of rounding errors can vary depending on the sequence in which the credits and debits are applied. This means that the precision of each number may differ, leading to slight discrepancies in the result. As the order of operations changes, even small rounding errors can compound, causing the zero-sum check to fail (&lt;em&gt;In fact, real-world zero-sum checks involving floating-point arithmetic often have a 'zero-safe' interval, where small discrepancies can go unnoticed due to rounding errors within a certain threshold. More leverage to exploit&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;Thus, if the transaction log is randomized or the order of operations is altered, the zero-sum balance will no longer hold true. This demonstrates the &lt;strong&gt;non-commutative nature of floating-point operations&lt;/strong&gt;, where the sequence of operations directly affects the outcome, and the seemingly perfect balance can be disrupted by changing that order.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Accumulation of Errors&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Floating-point numbers are approximations, and with each operation, small errors can accumulate. For instance, adding a very small number to a large one may result in a loss of precision, as the small value may be discarded. This can lead to discrepancies, especially in calculations where large and small numbers interact. In Python, using a type like &lt;cite&gt;Decimal&lt;/cite&gt; instead of &lt;cite&gt;float&lt;/cite&gt; can help minimize such precision issues, as it offers a more accurate representation of decimal numbers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rounding-and-truncation-errors"&gt;
&lt;h3&gt;Rounding and Truncation Errors&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Rounding Errors&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In floating-point arithmetic, rounding is inevitable. Every time an operation results in a number that requires more digits than the system can handle, it rounds the result to fit within the system's precision. These small rounding discrepancies can accumulate over multiple operations, leading to noticeable errors. For example:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Rounding (0.9990) to (1)&lt;/li&gt;
&lt;li&gt;Rounding (1.23456123456) to (1.23)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both result in small discrepancies that, when compounded over multiple operations, can have a significant impact on the final result.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Truncation Errors&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Truncation occurs when the result of a calculation is cut off after a certain number of digits or decimal places. Since floating-point systems have finite precision, numbers are often truncated to fit within this limit. While this is less noticeable in small-scale operations, over time, truncation errors can compound and affect the overall accuracy of results.&lt;/p&gt;
&lt;p&gt;In summary, while floating-point arithmetic is suitable for many general purposes, when it comes to financial transactions, its limitations‚Äîespecially in terms of precision, rounding, and truncation‚Äîdemand careful handling. The need for precise and accurate accounting of every transaction is why these errors can create significant issues in financial systems, which rely on the integrity of their underlying math.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion-why-precise-representation-matters"&gt;
&lt;h2&gt;Conclusion: Why Precise Representation Matters&lt;/h2&gt;
&lt;p&gt;In today's systems, the risk of &amp;quot;penny-shaving&amp;quot; schemes is not always driven by malicious intent, but rather by the inherent limitations of floating-point precision. As we've seen, small errors in rounding, truncation, and the order of operations can add up over time, creating discrepancies that may go unnoticed in regular accounting practices. These tiny fractions of a cent, though seemingly insignificant, can accumulate to substantial sums in large-scale operations.&lt;/p&gt;
&lt;p&gt;When floating-point arithmetic is used in financial systems, it introduces a level of imprecision that can easily be exploited‚Äîintentionally or not‚Äîif not carefully managed. Therefore, understanding how these errors arise and how they affect calculations is crucial to maintaining the integrity of financial data. For anyone working in or developing such systems, precision is not just a matter of accuracy, but a safeguard against unintended consequences that can undermine trust and transparency.&lt;/p&gt;
&lt;p&gt;In short, while floating-point math is indispensable in many areas of computing, when it comes to finances, it's essential to recognize its limitations and apply more accurate methods, such as the use of decimal types, to ensure that every cent counts.&lt;/p&gt;
&lt;p&gt;And with that, you're ready for your well-earned retirement‚Äîjust like a true Superman 3-style plot. Keep those pennies flying under the radar, and when you cash out, make sure it's in diamonds, jewelry, or some other trace-less treasure. Enjoy the quiet life, sipping margaritas on your beachfront estate, knowing that the floating-point errors worked in your favor all along. Here's to a retirement funded by clever math‚Äîjust don't forget to keep an eye on your calculations, or the next Superman might be coming to clean up the mess!&lt;/p&gt;
&lt;/div&gt;
</content><category term="finance"></category><category term="python finance"></category></entry><entry><title>Why You Should Never Use Floats/Doubles Primitives for Money</title><link href="https://gutomaia.net/floatmoney.html" rel="alternate"></link><published>2024-11-16T21:00:00-03:00</published><updated>2024-11-16T21:00:00-03:00</updated><author><name>Guto Maia</name></author><id>tag:gutomaia.net,2024-11-16:/floatmoney.html</id><summary type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="superman 3: Gus streaching to reach computer" src="https://gutomaia.net/images/gus_streach.png" /&gt;
&lt;/div&gt;
&lt;p&gt;Handling real numbers in computer science is a complex task, especially for fields like finance and astronomy, where precision is critical. Standard floating-point arithmetic is optimized for speed, often at the expense of exact precision. This trade-off has a particularly problematic impact on financial calculations, where even tiny rounding errors ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="superman 3: Gus streaching to reach computer" src="https://gutomaia.net/images/gus_streach.png" /&gt;
&lt;/div&gt;
&lt;p&gt;Handling real numbers in computer science is a complex task, especially for fields like finance and astronomy, where precision is critical. Standard floating-point arithmetic is optimized for speed, often at the expense of exact precision. This trade-off has a particularly problematic impact on financial calculations, where even tiny rounding errors can add up to substantial discrepancies. Consequently, many programming languages provide special libraries or data types for precise decimal handling, specifically for applications where exactness is paramount.&lt;/p&gt;
&lt;div class="section" id="understanding-the-problem"&gt;
&lt;h2&gt;Understanding the Problem&lt;/h2&gt;
&lt;div class="section" id="how-does-ieee-754-represent-floating-points"&gt;
&lt;h3&gt;How does IEEE 754 Represent Floating Points?&lt;/h3&gt;
&lt;p&gt;Most programming languages, if not all, represent floating-point numbers according to the IEEE 754 standard, which specifies how to encode decimal numbers in binary format for compatibility across systems. This standard uses scientific notation within a fixed number of bits, trading some accuracy for speed.&lt;/p&gt;
&lt;p&gt;For example, the decimal number &lt;tt class="docutils literal"&gt;0.1&lt;/tt&gt; (i.e., &lt;span class="formula"&gt;1√ó10&lt;sup&gt;‚Äâ‚àí‚Äâ1&lt;/sup&gt;&lt;/span&gt;) cannot be represented precisely in binary, so IEEE 754 provides an approximation. In the 32-bit IEEE 754 format, the number is broken down as follows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The first bit is for the sign.&lt;/li&gt;
&lt;li&gt;The next 8 bits represent the exponent.&lt;/li&gt;
&lt;li&gt;The remaining 23 bits store the mantissa.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In 64-bit format, the exponent uses 11 bits, and the mantissa uses 52 bits. Due to this finite bit length, rounding errors can occur in even simple arithmetic operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="floating-point-in-action"&gt;
&lt;h3&gt;Floating Point in Action&lt;/h3&gt;
&lt;p&gt;To see IEEE 754's limitations in Python, open a Python 3 terminal and try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;100.3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;100.4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You might expect &lt;cite&gt;True&lt;/cite&gt;, but you'll see &lt;cite&gt;False&lt;/cite&gt; because:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;100.3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;
&lt;span class="mf"&gt;100.39999999999999&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can delve further by examining the binary representation of floating-point numbers in Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;struct&lt;/span&gt;

&lt;span class="n"&gt;BLUE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s2"&gt;[1;34m&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;CYAN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s2"&gt;[1;36m&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;GREEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s2"&gt;[0;32m&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;RESET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s2"&gt;[0;0m&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctype&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rjust&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;struct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;binary_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exponent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mantissa&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;!f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;bits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctype&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;end_exponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;exponent&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;start_mantissa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;end_exponent&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;end_mantissa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start_mantissa&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;mantissa&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;BLUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;GREEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;end_exponent&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;CYAN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start_mantissa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;end_mantissa&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;RESET&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;binary_str_fp64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exponent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mantissa&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;!d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;binary_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mantissa&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Try it out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_str_fp64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="mi"&gt;010000000000000110011001100110011001100110011001100110011001101&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The sign bit appears in blue, the exponent bits in green, and the mantissa in cyan.&lt;/p&gt;
&lt;p&gt;To observe the full decimal value without truncation, Python's &lt;cite&gt;Decimal&lt;/cite&gt; type is helpful:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;decimal&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2.100000000000000088817841970012523233890533447265625&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What may seem like an error is actually by design‚Äîit's a standard behavior resulting from how floating-point numbers are stored and rounded in memory. This limitation is not unique to Python; it affects many programming languages due to the IEEE 754 standard.&lt;/p&gt;
&lt;div class="section" id="javascript-and-typescript-example"&gt;
&lt;h4&gt;Javascript and TypeScript example&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;100.3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;100.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// False!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="java-example"&gt;
&lt;h4&gt;Java example&lt;/h4&gt;
&lt;p&gt;In Java, floating-point precision issues are also evident when using the float or double types:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FloatPrecision&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;100.3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;100.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;// 100.39999999999999&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="c-example"&gt;
&lt;h4&gt;C example&lt;/h4&gt;
&lt;p&gt;C also exhibits precision issues with floating-point arithmetic, using the float or double types:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;100.3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;100.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// 0 (false)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%.17f&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 100.3999999999999915&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="c-example-1"&gt;
&lt;h4&gt;C# Example&lt;/h4&gt;
&lt;p&gt;In C#, the double type produces similar rounding errors, as shown here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;FloatPrecision&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;100.3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;100.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// False&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;// 100.39999999999999&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="php-example"&gt;
&lt;h4&gt;PHP Example&lt;/h4&gt;
&lt;p&gt;In PHP, floating-point numbers are also subject to the same precision issues. Here's how it looks in PHP:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;100.3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;100.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// bool(false)&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;               &lt;span class="c1"&gt;// 100.39999999999999&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This small error can impact financial calculations significantly. It arises because of inherent rounding in floating-point representation, which is a trade-off between speed and exactness.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="a-more-precise-solution-using-decimal-for-financial-calculations"&gt;
&lt;h2&gt;A More Precise Solution: Using Decimal for Financial Calculations&lt;/h2&gt;
&lt;p&gt;For precise financial calculations, Python provides the &lt;cite&gt;Decimal&lt;/cite&gt; type. Unlike floats, &lt;cite&gt;Decimal&lt;/cite&gt; maintains exact values, which is critical for financial data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Always input numbers as strings when using &lt;cite&gt;Decimal&lt;/cite&gt; to avoid loading imprecise float values into it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;100.3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;100.4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="going-further-the-money-class"&gt;
&lt;h3&gt;Going Further: The Money Class&lt;/h3&gt;
&lt;p&gt;While &lt;cite&gt;Decimal&lt;/cite&gt; handles the numeric precision, financial calculations often require a bit more structure, such as tracking currency. To address this, we can create a &lt;cite&gt;Money&lt;/cite&gt; class that uses &lt;cite&gt;Decimal&lt;/cite&gt; for value representation and includes a currency attribute.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;decimal&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;enum&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Enum&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Currency&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Enum&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;USD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;USD&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;EUR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;EUR&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;BRL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;BRL&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Money&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Currency&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Currency&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;USD&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currency&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currency&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currency&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;.2f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;# Additional operations and validation can be added here.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, creating a &lt;cite&gt;Money&lt;/cite&gt; instance is straightforward:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Money&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;100.30&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Currency&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BRL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;BRL&lt;/span&gt; &lt;span class="mf"&gt;100.30&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;cite&gt;Money&lt;/cite&gt; class helps keep calculations precise and provides a natural place to implement any additional methods or validation rules necessary for financial operations.&lt;/p&gt;
&lt;p&gt;Most programming languages offer libraries or specific data types to handle precise decimal calculations, especially for financial applications. Let's take a look on some.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="javascript-and-typescript-decimal-js-library"&gt;
&lt;h3&gt;JavaScript and TypeScript: &lt;cite&gt;decimal.js&lt;/cite&gt; Library&lt;/h3&gt;
&lt;p&gt;JavaScript and TypeScript don't have built-in decimal types, but the &lt;cite&gt;decimal.js&lt;/cite&gt; library offers precise decimal arithmetic.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# install decimal.js&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;decimal.js
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// JavaScript const Decimal = require(&amp;#39;decimal.js&amp;#39;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;money1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;100.3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;money2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;money1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;money2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Outputs: 100.4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="java-bigdecimal"&gt;
&lt;h3&gt;Java: BigDecimal&lt;/h3&gt;
&lt;p&gt;Java's BigDecimal class is ideal for precise decimal calculations, as it avoids the rounding issues of floating-point numbers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;java.math.BigDecimal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MoneyCalculation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;BigDecimal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;money1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BigDecimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100.3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;BigDecimal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;money2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BigDecimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;BigDecimal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;money1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;money2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Outputs: 100.4&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="php-bcmath-extension"&gt;
&lt;h3&gt;PHP: BCMath Extension&lt;/h3&gt;
&lt;p&gt;PHP's BCMath extension provides functions for arbitrary-precision arithmetic, perfect for handling money.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$money1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;100.3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$money2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bcadd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$money1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$money2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$total&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Outputs: 100.4&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="c-boost-multiprecision-cpp-dec-float"&gt;
&lt;h3&gt;C++: boost::multiprecision::cpp_dec_float&lt;/h3&gt;
&lt;p&gt;C++ lacks a built-in decimal type, but the Boost library provides cpp_dec_float for precise decimal calculations.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;boost/multiprecision/cpp_dec_float.hpp&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;namespace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;boost&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;multiprecision&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cpp_dec_float_50&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;money1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100.3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cpp_dec_float_50&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;money2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cpp_dec_float_50&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;money1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;money2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Outputs: 100.4 return 0;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="real-world-scenarios-the-madness-in-practice"&gt;
&lt;h2&gt;Real-World Scenarios: The Madness in Practice&lt;/h2&gt;
&lt;p&gt;In practice, I have observed several fintech companies‚Äîyes, not just one or two‚Äîthat fail to use precise data types to represent monetary values. Instead, they rely on standard floating-point primitive numbers (float), which are not designed for exact representation of decimal values, as demonstrated.&lt;/p&gt;
&lt;p&gt;The result? Rounding errors accumulate across transactions, silently affecting balances. These errors may initially seem negligible but can snowball into significant discrepancies over millions of transactions. Now consider taxes and commissions: when each value is calculated as a percentage of an imprecise number representation, the errors compound. Inaccurate tax/commission calculations not only affect business bottom lines but can also lead to compliance issues and legal penalties.&lt;/p&gt;
&lt;p&gt;It's madness that many fintechs, which handle billions in assets, skip the basics of numerical representation‚Äîit's indded a ground basic topic taught in the first semester of computer science or finance courses. This negligence can lead to reputational damage, regulatory fines, and a lack of trust from users.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion-precision-is-non-negotiable-in-financial-systems"&gt;
&lt;h2&gt;Conclusion: Precision is Non-Negotiable in Financial Systems&lt;/h2&gt;
&lt;p&gt;Using Decimal instead of float is not just a best practice‚Äîit's a necessity for financial applications where precision is non-negotiable. Floating-point arithmetic is inherently imprecise for base-10 operations, making it unsuitable for handling currency. The errors might start small, but in systems managing high volumes of transactions, they can rapidly escalate to unacceptable levels.&lt;/p&gt;
&lt;p&gt;By adopting Decimal and encapsulating it within a Money class, developers gain a double advantage:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Accuracy: Decimal ensures precise arithmetic and eliminates rounding errors inherent in float operations.&lt;/li&gt;
&lt;li&gt;Abstraction: A Money class allows you to enforce domain-specific rules, such as currency conversions, formatting, and rounding policies, providing a cleaner and more maintainable codebase.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ignoring precision is not an option. Financial systems deal with people's money, trust, and livelihoods. A lack of attention to these details can cause significant harm‚Äînot just to your application, but to your reputation and your customers. As engineers, we have a responsibility to choose the right tools and practices for the job.&lt;/p&gt;
&lt;p&gt;In the world of fintech, where small margins and high stakes are the norms, precision is paramount. The question isn't whether you can use floats‚Äîit's whether you're willing to gamble with the accuracy and reliability of your financial systems. And that's a bet no responsible engineer or organization should take.&lt;/p&gt;
&lt;/div&gt;
</content><category term="finance"></category><category term="python finance"></category></entry><entry><title>wedNESday #9 - Exploring NES Graphics</title><link href="https://gutomaia.net/wednesday_9.html" rel="alternate"></link><published>2024-05-01T20:00:00-03:00</published><updated>2024-05-01T20:00:00-03:00</updated><author><name>Guto Maia</name></author><id>tag:gutomaia.net,2024-05-01:/wednesday_9.html</id><summary type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="a long time ago" src="https://gutomaia.net/images/fightclub.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;Playing around with NES graphics can be an incredibly fun and rewarding experience. Transitioning from that blank screen to one filled with tiles in a nametable highlights the capabilities and limitations of the platform. It's like a window ready to explode.&lt;/p&gt;
&lt;p&gt;Through this post, we might use some terms and ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="a long time ago" src="https://gutomaia.net/images/fightclub.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;Playing around with NES graphics can be an incredibly fun and rewarding experience. Transitioning from that blank screen to one filled with tiles in a nametable highlights the capabilities and limitations of the platform. It's like a window ready to explode.&lt;/p&gt;
&lt;p&gt;Through this post, we might use some terms and conventions on the NES. There is NES 101 at the end of the post if you may need.&lt;/p&gt;
&lt;p&gt;In this post, you may stomp in some terms and conventions used in NES game development. For those unfamiliar with NES graphs, we've included a handy NES 101 section at the end of the post for reference.&lt;/p&gt;
&lt;div class="section" id="the-goal"&gt;
&lt;h2&gt;The goal&lt;/h2&gt;
&lt;p&gt;The objective is to import any image onto a NES screen. However, when importing a regular image, we may encounter loss in colors and resolution. How can we assess the accuracy of the program?&lt;/p&gt;
&lt;p&gt;The solution is simple: import screens that the NES was capable of rendering. By comparing the imported images with the original NES screens, we can gauge the program's accuracy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tyler-d"&gt;
&lt;h2&gt;Tyler D&lt;/h2&gt;
&lt;p&gt;I've developed a command to import images onto a NES screen. Does it work effectively? How accurate it is? But how can I verify this? How can I ensure its reliability?&lt;/p&gt;
&lt;p&gt;Let's review some of the know glitchs.&lt;/p&gt;
&lt;div class="section" id="the-inner-war"&gt;
&lt;h3&gt;The Inner War&lt;/h3&gt;
&lt;p&gt;In &amp;quot;Abadox: The Deadly Inner War&amp;quot; is a horizontally scrolling shoot 'em up video game developed by Natsume and published by Milton Bradley Company released in North America in 1990 and in Europe in 1991.&lt;/p&gt;
&lt;p&gt;In &amp;quot;Abadox,&amp;quot; players control a small spaceship tasked with navigating through the insides of a giant alien organism known as &amp;quot;Abadox&amp;quot; to rescue the princess Maria. The game's story is set in the year 5012, where the planet Abadox has been invaded and consumed by a giant alien organism. The princess Maria has been swallowed by the creature, and the player must pilot their ship through various levels of the organism's interior to rescue her and ultimately destroy the creature.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Orignal&lt;/th&gt;
&lt;th class="head"&gt;Emulated&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/abadox_the_deadly_inner_war.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/abadox_the_deadly_inner_war_emulated.png" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Above, we have the original title screen image side by side with the emulated one generated by the tool. At first glance, it looks quite amazing. Look again, the eyes can be deceiving.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Diff&lt;/th&gt;
&lt;th class="head"&gt;FCEUX Screenshot&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/abadox_the_deadly_inner_war_diff.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/abadox_the_deadly_inner_war_screenshot.png" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Now, with more detail, we can observe on the left the disparities between the Original and the Emulated images. In orange, we can see the differences in Metatiles, while in yellow, the discrepancies in tiles are highlighted, and in red, the pixel differences stand out. These discrepancies may have occurred because the original image might have utilized sprites to enhance certain colors. I will demonstrate this in the next example. However, what truly stands out here is the color disparity between the Emulated and the FCEUX Screenshot. This discrepancy arises from my improper utilization of the actual FCEUX palette table. This marks our first glitch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-m-batman-without-sprite-overlay"&gt;
&lt;h3&gt;I'm Batman, without sprite overlay&lt;/h3&gt;
&lt;p&gt;&amp;quot;Batman: The Video Game&amp;quot; is a side-scrolling action-platformer developed and published by Sunsoft. Released in 1989, it's based on the 1989 film &amp;quot;Batman&amp;quot; directed by Tim Burton.&lt;/p&gt;
&lt;p&gt;In the game, players control Batman as he fights through Gotham City to stop the villainous Joker and save the city. The gameplay consists of traversing side-scrolling levels, battling enemies, and ultimately confronting bosses at the end of each stage. Batman's primary weapon is his Batarang, but he can also perform melee attacks and use other gadgets such as a grappling hook to navigate levels.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Orignal&lt;/th&gt;
&lt;th class="head"&gt;Emulated&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/batman.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/batman_emulated.png" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The title screen is astonishing. For its time, it exudes a photorealistic feeling. However, in emulation, looks a more noir aesthetic.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Diff&lt;/th&gt;
&lt;th class="head"&gt;FCEUX Screenshot&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/batman_diff.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/batman_screenshot.png" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I see, some yellow tones were omitted from the result. Each 16x16 metatile block has a 4-color limit. To compensate for this, the game utilizes sprites in certain areas of the face and symbol to incorporate subtle touches. This time, we don't need the difference image to notice, although you can also check it out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="double-dragon-s-dungeons"&gt;
&lt;h3&gt;Double Dragon's Dungeons&lt;/h3&gt;
&lt;p&gt;&amp;quot;Advanced Dungeons &amp;amp; Dragons: DragonStrike&amp;quot; is a fantasy-themed video game released in 1992. Developed by Westwood Associates and published by FCI, the game is based on the &amp;quot;DragonStrike&amp;quot; tabletop role-playing game (RPG) from the Dungeons &amp;amp; Dragons franchise.&lt;/p&gt;
&lt;p&gt;In &amp;quot;DragonStrike,&amp;quot; players assume the role of a dragon rider tasked with defeating evil forces threatening the land of Krynn. The game combines elements of action and flight simulation with RPG mechanics, offering a unique gaming experience within the Dungeons &amp;amp; Dragons universe.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Orignal&lt;/th&gt;
&lt;th class="head"&gt;Emulated&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/advanced_dungeons_dragons_dragon_strike.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/advanced_dungeons_dragons_dragon_strike_emulated.png" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;A superb &amp;quot;Double Dragon&amp;quot; title screen that doesn't depict the typical theme of brothers fighting for a girl. However, it couldn't fit into the regular pattern table.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Diff&lt;/th&gt;
&lt;th class="head"&gt;FCEUX Screenshot&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/advanced_dungeons_dragons_dragon_strike_diff.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/advanced_dungeons_dragons_dragon_strike_screenshot.png" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;That image utilizes sprites to render an entire area. With only the NES's background tiles, we can display at most 256 unique tiles on the screen. However, the screen is composed of 960 tiles. This inevitably leads to border issues, as tile repetition becomes necessary. To address this limitation, the game renders part of the screen using sprites. However, there's a catch: we can display at most 64 sprites on the screen, with no more than 8 in the same line. This allows for a maximum of 320 unique tiles on the screen. Therefore, despite this workaround, there is still some repetition present in the rendering.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="still-there"&gt;
&lt;h3&gt;Still there?&lt;/h3&gt;
&lt;p&gt;I doubt, that you are still reading this or that you did care about the resume of the previous game, if it was released in 1990 or not.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Orignal&lt;/th&gt;
&lt;th class="head"&gt;Emulated&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/addams_family_the_pugsley_s_scavenger_hunt.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/addams_family_the_pugsley_s_scavenger_hunt_emulated.png" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Even what would be the simplyst screen shot, some minor glitchs would arrise.
See the botton part of the image?&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Diff&lt;/th&gt;
&lt;th class="head"&gt;FCEUX Screenshot&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/addams_family_the_pugsley_s_scavenger_hunt_diff.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://gutomaia.net/images/addams_family_the_pugsley_s_scavenger_hunt_screenshot.png" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Problem here is dua to some attribute table missing. There must be some attribute table missing data on the final rom.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We will found glitchs regarding&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Differs in the used palette and emulator palette;&lt;/li&gt;
&lt;li&gt;Use of sprite overlay to increse color's in area;&lt;/li&gt;
&lt;li&gt;Render part of the screen in sprites;&lt;/li&gt;
&lt;li&gt;Attribute table not being fully defined.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Despite encountering several issues, the tool boasts an accuracy rate of over 90%. To be more precise, let's take a closer look:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Title Screens&lt;/th&gt;
&lt;th class="head"&gt;Hits&lt;/th&gt;
&lt;th class="head"&gt;Misses&lt;/th&gt;
&lt;th class="head"&gt;Accuracy&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;618&lt;/td&gt;
&lt;td&gt;134761&lt;/td&gt;
&lt;td&gt;13559&lt;/td&gt;
&lt;td&gt;90.85827939590075 %&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Testing the tool agains a random sample of NES title screens.
I our case is using 618 different images. You can check the more detail
result at &lt;a class="reference external" href="https://gutomaia.net/TylerD/gamelist.html"&gt;TylerD's game title screen list&lt;/a&gt;.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NES Graphs 101&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tiles&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tiles are the building blocks of NES graphics. Each tile is an 8x8 pixel square. They are made of two bitplane, allowing at most 4 colors per tile. A tile can be represented in the screen in two forms, in the background as a Background Tile or in the foreground as a Sprite.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pattern Tables&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pattern tables store the graphical data for each tile used in the game. There are two pattern tables in the NES, each containing 256 tiles. These pattern tables are where developers define the visual appearance of sprites and backgrounds in their games. Usually, games uses one pattern table for the background tiles and the other for the sprites.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Name Tables&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Name tables are an essential part of the NES's graphics system. In simple terms, a name table is a 32x30 grid of 8x8 tiles that represent what Usually
represents the background of the game.&lt;/p&gt;
&lt;p&gt;player sees on the screen during gameplay. However, the NES only has enough memory to store two name tables at once, each representing one screen of gameplay. These name tables are often referred to as nametable 0 and nametable 1.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How It Works&lt;/strong&gt;&lt;/p&gt;
&lt;p class="last"&gt;The NES's graphics hardware fetches data from the name tables and pattern tables to generate the visuals seen on the screen. When the console is powered on or reset, the CPU initializes the name tables with the necessary graphical data. During gameplay, the CPU updates the name tables as needed to reflect changes in the game world.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="nes"></category><category term="6502"></category><category term="nes"></category><category term="python"></category><category term="wedNESday"></category></entry><entry><title>wedNESday #8 - A long delay</title><link href="https://gutomaia.net/wednesday_8.html" rel="alternate"></link><published>2024-04-24T16:20:00-03:00</published><updated>2024-04-24T16:20:00-03:00</updated><author><name>Guto Maia</name></author><id>tag:gutomaia.net,2024-04-24:/wednesday_8.html</id><summary type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="a long time ago" src="https://gutomaia.net/images/a_long_time_ago.webp" /&gt;
&lt;/div&gt;
&lt;div class="section" id="a-long-time-ago"&gt;
&lt;h2&gt;A Long Time Ago&lt;/h2&gt;
&lt;p&gt;It's been a while since my last update, and if you've been visiting this page eagerly awaiting news, thank you for your patience. Let's dive right in. Recently, I've been using the &amp;quot;wedNESday&amp;quot; project to thoroughly test NES emulators and improve them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="in-a-galaxy-far-far-away"&gt;
&lt;h2&gt;In a Galaxy Far ‚Ä¶&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="a long time ago" src="https://gutomaia.net/images/a_long_time_ago.webp" /&gt;
&lt;/div&gt;
&lt;div class="section" id="a-long-time-ago"&gt;
&lt;h2&gt;A Long Time Ago&lt;/h2&gt;
&lt;p&gt;It's been a while since my last update, and if you've been visiting this page eagerly awaiting news, thank you for your patience. Let's dive right in. Recently, I've been using the &amp;quot;wedNESday&amp;quot; project to thoroughly test NES emulators and improve them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="in-a-galaxy-far-far-away"&gt;
&lt;h2&gt;In a Galaxy Far Far Away&lt;/h2&gt;
&lt;p&gt;Emulators are being tested using a CPU specification derived from &lt;a class="reference external" href="https://github.com/nwidger/nintengo/blob/master/m65go2/instructions_test.go"&gt;Nintego&lt;/a&gt;. Here are the emulators I've been putting through their paces:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ergoadams/arbne"&gt;Arbne&lt;/a&gt;: Discovered in a serendipitous encounter within a &lt;a class="reference external" href="https://www.reddit.com/r/EmuDev/comments/gc5w8w/a_really_bad_nes_emulator_in_python_feedback/"&gt;Reddit thread&lt;/a&gt;, a call for feedback that demands an answer.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jtauber/applepy"&gt;ApplePy&lt;/a&gt;: An Apple 2 emulator by James Tauber, although not a NES emulator, it relies on the 6502 architecture.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/bfirsh/jsnes"&gt;JSnes&lt;/a&gt;: A NES emulator written in Javascript, pivotal for my experiments in nodeNES.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/PyAndy/Py3NES"&gt;Py3NES&lt;/a&gt;: Constructed amidst live streaming sessions, Py3NES offers a fascinating insight into NES emulation, with its entire development journey documented on &lt;a class="reference external" href="https://www.youtube.com/channel/UCT0oEArSloMLL_URLyy2HfA"&gt;YouTube&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mnaberez/py65"&gt;Py65&lt;/a&gt;: A Python-based 6502 emulator, serving as a critical component in the testing arsenal.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jameskmurphy/nes"&gt;Pyntendo&lt;/a&gt;: Implemented also CPython, Pyntendo promises an intriguing exploration into NES emulation.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Torlus/6502.js"&gt;6502js&lt;/a&gt;: Gregory Estrade's 6502 emulator, a very interesting for quest for accuracy and reliability.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Goal is to improve the overwall accuracy&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary-of-results"&gt;
&lt;h2&gt;Summary of Results&lt;/h2&gt;
&lt;p&gt;The following table succinctly summarizes the outcomes gleaned from the 6502 instruction tests:&lt;/p&gt;
&lt;!-- Color profiles for Sphinx. --&gt;
&lt;!-- Has to be used with hacks.css --&gt;
&lt;!-- (https://bitbucket.org/lbesson/web-sphinx/src/master/.static/hacks.css) --&gt;
&lt;!-- (c) Lilian Besson, 2011-2016, https://bitbucket.org/lbesson/web-sphinx/ --&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="13%" /&gt;
&lt;col width="13%" /&gt;
&lt;col width="13%" /&gt;
&lt;col width="13%" /&gt;
&lt;col width="13%" /&gt;
&lt;col width="13%" /&gt;
&lt;col width="13%" /&gt;
&lt;col width="13%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Instruction&lt;/th&gt;
&lt;th class="head"&gt;ApplePy&lt;/th&gt;
&lt;th class="head"&gt;Arbne&lt;/th&gt;
&lt;th class="head"&gt;JSnes&lt;/th&gt;
&lt;th class="head"&gt;Py3NES&lt;/th&gt;
&lt;th class="head"&gt;Py65&lt;/th&gt;
&lt;th class="head"&gt;Pyntendo&lt;/th&gt;
&lt;th class="head"&gt;6502js&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;adc immediate with bcd&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;bcc&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;beq&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;bne&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;brk&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;irq interrupt&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;jsr&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;jsr stack pointer&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;jsr with illegal opcode&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;nmi interrupt&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;php&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;pla&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;pla n flag set&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;pla z flag set&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;plp&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;rst interrupt&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;rti&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;rts&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;sbc immediate with bcd&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;tsx&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;txs&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="red"&gt;NOT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="green"&gt;OK&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;You can find an updated version of this table at &lt;a class="reference external" href="https://gutomaia.net/wedNESday/0.0.x/instructions.html#cpu-failed-tests"&gt;·∫ÅedNESday's documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="result-details"&gt;
&lt;h2&gt;Result Details&lt;/h2&gt;
&lt;p&gt;NES emulators typically do not implement the decimal mode, rendering ADC and SEC operations with BCD optional, whereas these functionalities are essential for 6502 emulators. Currently, my focus lies on refining the interrupt specification. That's explain why irq, nmi, and reset interruption tests fail across all emulators.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;PLP Instruction Issue:&lt;/strong&gt; Across all emulators, the PLP instruction presents a notable issue, which will be addressed in further detail in a dedicated topic.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ApplePy Limitations:&lt;/strong&gt; ApplePy lacks implementations for math operations with BCD and interrupts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Arbne Quirk:&lt;/strong&gt; Arbne exhibits a minor issue with the BRK instruction, specifically concerning the return of the Program Counter, resulting in a peculiar plus one offset.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JSnes Challenges:&lt;/strong&gt; JSnes faces challenges with all branch instructions, JSR, and RTS due to issues with instructions that alter the Program Counter position. This may stem from underlying logic in the bridge.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Py3NES BRK Issue:&lt;/strong&gt; Py3NES encounters an issue with the BRK instruction.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Py65 Differences:&lt;/strong&gt; Py65 demonstrates discrepancies in the behavior of jump instructions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pyntendo&lt;/strong&gt;, Pytendo has only a minor issue with invalid opcodes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;6502js Procedure Call:&lt;/strong&gt; The 6502.js emulator encounters issues with the JSR (Jump to Subroutine) and RTS (Return from Subroutine) instructions. These issues impact the proper execution of subroutine calls and returns.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Number of Cycles:&lt;/strong&gt; Across all emulators, I found it necessary to disable cycle checking in certain instructions to ensure proper functionality. I will be publishing a new table documenting these instances where cycle checking had to be skipped.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In response to these findings, I've initiated forks of each emulator to address the some of the identified issues. The goal is to synchronize the behavior of all emulators, ensuring consistency and compatibility. To achieve this, I'm focusing on improving the test cases for instructions such as BRK, JSR, PLP, and RST, which are crucial for accurate emulation.&lt;/p&gt;
&lt;div class="section" id="plp-instruction"&gt;
&lt;h3&gt;PLP Instruction&lt;/h3&gt;
&lt;p&gt;The PLP instruction, short for &amp;quot;Pull Processor Status from Stack,&amp;quot; retrieves the last value from the stack and updates the Status register accordingly. It affects all flags except the Break (B) and Unused (U) flags.&lt;/p&gt;
&lt;p&gt;Essentially, this means that whatever value the B flag had before the PLP execution will remain unchanged afterward, as will the U flag. According to the &lt;a class="reference external" href="https://github.com/nwidger/nintengo/blob/f173d610a4acece3bb01a6564fe0f35b1a0ed7ac/m65go2/instructions_test.go#L1210"&gt;Nintego PLP Test&lt;/a&gt;, if the value 0xFF is pushed onto the stack, PLP will pull 0xCF into the Status register.&lt;/p&gt;
&lt;p&gt;However, giving the Nintengo example, it's worth noting that although fetching the U flag will always return &amp;quot;1&amp;quot;, although the corresponding bit in the status register is now set to 0 (0xCF). Further testing on real hardware may be necessary to validate this behavior.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;STX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;$FF&lt;/span&gt;
&lt;span class="nf"&gt;TXS&lt;/span&gt;
&lt;span class="nf"&gt;PLP&lt;/span&gt;
&lt;span class="nf"&gt;JSR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;print_p_reg&lt;/span&gt;
&lt;span class="nf"&gt;JSR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;print_flags&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="testing-specification"&gt;
&lt;h3&gt;Testing Specification&lt;/h3&gt;
&lt;p&gt;I often emphasize that a good test is built upon a solid specification. Following the principles of Lean Architecture and Model Driven Architecture (MDA), I consider a specification to be effective when it exhibits the following characteristics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Self-contained:&lt;/strong&gt; A good specification should be self-contained, meaning it doesn't rely on any external references. It defines the scope of the problem within itself, providing clear boundaries for testing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Platform Independent:&lt;/strong&gt; A specification should be platform independent, meaning it can be applied uniformly across different environments and architectures. This ensures consistency and compatibility, regardless of the underlying technology stack or infrastructure.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Abstracted:&lt;/strong&gt; A specification should be abstracted, avoiding implementation details or reliance on concrete methods. This ensures flexibility and adaptability, allowing for changes or enhancements without impacting the overall testing framework.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extendable:&lt;/strong&gt; An ideal specification is designed to be extendable, capable of accommodating future requirements or modifications. This flexibility enables the testing framework to evolve alongside the project it supports.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Readable:&lt;/strong&gt; Perhaps most importantly, a specification must be readable by humans. Clear and concise documentation ensures that the intent and requirements of the system under test are easily understood, facilitating collaboration and maintenance efforts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While the CPU specs still lack complete abstraction due to explicit calls to assert methods from the unittest.TestCase mixin, efforts are underway to further abstract these specifications in alignment with these principles.&lt;/p&gt;
&lt;p&gt;Aside from the &lt;cite&gt;abstracted&lt;/cite&gt;, which the CPU specs still lacks since it does explicit calls assert methods from the unittest.TestCase as a mixin.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="nes"></category><category term="6502"></category><category term="nes"></category><category term="python"></category><category term="wedNESday"></category></entry><entry><title>Double Dragon</title><link href="https://gutomaia.net/double_dragon.html" rel="alternate"></link><published>2017-02-22T23:00:00-03:00</published><updated>2017-02-12T13:54:00-02:00</updated><author><name>Guto Maia</name></author><id>tag:gutomaia.net,2017-02-22:/double_dragon.html</id><summary type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="Double Dragon" src="https://gutomaia.net/images/double_dragon.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;Not in the mood to code today, so let's play a classic: Double Dragon. It's hard to explain nowadays what a phenomenal game it was back then. So before reviewing the NES version, which I'm going to play, let's first talk about the game‚Äôs history.&lt;/p&gt;
&lt;p&gt;At the end eighties ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="Double Dragon" src="https://gutomaia.net/images/double_dragon.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;Not in the mood to code today, so let's play a classic: Double Dragon. It's hard to explain nowadays what a phenomenal game it was back then. So before reviewing the NES version, which I'm going to play, let's first talk about the game‚Äôs history.&lt;/p&gt;
&lt;p&gt;At the end eighties, there was a Double Dragon machine at the center of every arcade. The game was so popular that it opened up the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Beat_em_up"&gt;beat'em up genre&lt;/a&gt;. Soon enough, arcades were filled with beloved beat ‚Äòem up games like Golden Axe and Final Fight; and then eventually CAPCOM would lead the genre to whole other level. But even by then, in the mid-nineties, brothers Billy and Jimmy Lee‚Äîthe stars of Double Dragon‚Äîwould never lose their spot.&lt;/p&gt;
&lt;p&gt;This story was quite simple: a love interest of Billy and Jimmy gets kidnapped by a street gang. Yep,  both brothers are interested in the same girl and‚Äîspoiler alert‚Äîthey fight each other for her at the end of the game. Prior the first stage, a small intro shows henchman's punching and taking the girl away, then the garage door open's up and the music and beat begins. Not exactly an original story, but the game made it feel like a great story; at the least, it was a great eighties story. In fact, there was something about the style that always reminded me of another eighties classic: &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Streets_of_Fire"&gt;Streets of Fire&lt;/a&gt; style. I swear, whenever I played Double Dragon, I always saw Willem Dafoe as the kidnapper; running off with that kidnapped girl over the shoulders.&lt;/p&gt;
&lt;p&gt;All in all, the arcade game was a classic. I‚Äôll never forget the hours I spent waiting to play the game; talking with others about how to best control the elbow smash or how to throw an enemy from a bridge without falling too. I remember that once I had to wait a guy cleanup the coin safe, 'cause coins were getting jammed. It was the main subject among gamers and game magazines.&lt;/p&gt;
&lt;div class="section" id="the-home-version"&gt;
&lt;h2&gt;The HOME version&lt;/h2&gt;
&lt;p&gt;Playing Double Dragon, at home, without needing to &amp;quot;insert coin&amp;quot; was amazing. But there were problems too. For me, I used to have the Master System version as a child. But the Master System missed the thrill. The timing of the game was off (especially compared to the NES version) and it also lacked the action sequences (I know it's related to licensing, but I as a gamer, I didn't care).&lt;/p&gt;
&lt;p&gt;Nevertheless, it was great. And then it got better: &lt;cite&gt;Double Dragon 2 - The Revenge.‚Äô Even just the cover was amazing. It also seemed to share an element with the movie `Big Trouble in Little China&lt;/cite&gt; and, again, &lt;cite&gt;Streets of Fire&lt;/cite&gt;. All in all, it was a lot of fun; the graphics were simple and the arm over the body style was remarkable.&lt;/p&gt;
&lt;p&gt;Then you stomp on with &lt;cite&gt;Double Dragon 3: The Sacred Stones&lt;/cite&gt;. More characters and a new feature: &amp;quot;Once you defeated your bitter enemies join your quest&amp;quot;. Meaning, after you beat a boss you can play with him too. And for sure, it was one of the hardest titles on the NES. It was hard as hell! Dammed stones, why so sacred?&lt;/p&gt;
&lt;p&gt;I think that the NES version is the definitive console version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-king-still-a-king"&gt;
&lt;h2&gt;A King still a King&lt;/h2&gt;
&lt;p&gt;Meanwhile, Final Fight was dominating the arcades in the early nineties and then the Super Nintendo was announced with it listed as a launch title. At the time I thought, &amp;quot;here comes a new Double Dragon.‚Äù Sega's had an upstart advantage, not only &lt;cite&gt;Golden Axe&lt;/cite&gt; was Genesis's launch title, but also it comes bundled with Altered Beast. Two beat ‚Äòem up in the launch, Sega was way ahead.&lt;/p&gt;
&lt;p&gt;Capcom, had the chance to help even things for Nintendo, but missed badly. Although the game was a almost perfect arcade conversion in terms of graphics, the lack of two player took away the replayability that NES's Double Dragon had. The sixteen bit's beat ‚Äòem up title was took from Nintendo by Sega's &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Streets_of_Rage"&gt;Streets of Rage&lt;/a&gt; later on. And here we go again, another game with Streets of Fire references. I think I see a pattern.&lt;/p&gt;
&lt;p&gt;This year, we have the launch of &lt;cite&gt;Double Dragon 4&lt;/cite&gt;. Ok, before we go on. Let's pretend they never release either &lt;cite&gt;Double Dragon Neon&lt;/cite&gt; game or the &lt;cite&gt;Double Dragon&lt;/cite&gt; movie. It's perfect stated here Streets of Fire is the official Double Dragon movie and Willem Dafoe the leader of the Black Warriors gang.&lt;/p&gt;
&lt;p&gt;The new adventure of the Lee brother's took place after the events of the DD3 and their sacred as hell stones, which I would never be able to collect. It has all the main features from his predecessors. The 2-player co-op with friend fighting at the end from the first. The remarkable style with the arms over the body from the second. And, finally, the bad-guys-join-the-party-after-you-beat-them feature.&lt;/p&gt;
&lt;p&gt;It took decades for a fourth episode, and all the other beat 'em up greaties never took this step (Golden Axe, Streets of Rage and Final Fight each have only 3 games). Why didn't they? My answer would be, the lack of style, good memories and nostalgia. Because ultimately Double Dragon was the game that created and defines the beat 'em up genre, as well as defines the &amp;quot;2 player&amp;quot; game style of the eighties.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ending-credits-and-bonus-stage"&gt;
&lt;h2&gt;Ending credits and bonus stage&lt;/h2&gt;
&lt;p&gt;I must share the authoring credits of this post with &lt;a class="reference external" href="http://www.blakejharris.com"&gt;Blake J. Harris&lt;/a&gt;. He did more than amazing review on the final draft. He reestructed and extracted the whole essence that was there. Blake is the author of the best-selling &lt;a class="reference external" href="https://www.amazon.com.br/Console-Wars-Nintendo-Defined-Generation/dp/0062276700"&gt;Console Wars&lt;/a&gt; book and made a interview that digs &lt;a class="reference external" href="http://www.slashfilm.com/streets-of-fire-oral-history/"&gt;Streets of Fire history&lt;/a&gt;. There wouldn't be a better reviewer for this post. Also, he is working on a new book about virtual reality.&lt;/p&gt;
&lt;/div&gt;
</content><category term="nes"></category><category term="nes"></category><category term="double dragon"></category><category term="wedNESday"></category><category term="review"></category></entry><entry><title>Ghostbusters</title><link href="https://gutomaia.net/ghostbusters.html" rel="alternate"></link><published>2017-02-16T22:15:00-02:00</published><updated>2017-02-16T22:15:00-02:00</updated><author><name>Guto Maia</name></author><id>tag:gutomaia.net,2017-02-16:/ghostbusters.html</id><summary type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="stranger things ghostbusters" src="https://gutomaia.net/images/stranger_things_ghostbusters.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;I had my childhood in the eighties, and 'course, I used to wake up on staturday morning to watch ghostbusters. Then, when I though for a continuos integration lamp, I know it should have the &amp;quot;prohibed ghost sign&amp;quot;! In this post, I'm gonna show you, how to use your smartthings ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="stranger things ghostbusters" src="https://gutomaia.net/images/stranger_things_ghostbusters.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;I had my childhood in the eighties, and 'course, I used to wake up on staturday morning to watch ghostbusters. Then, when I though for a continuos integration lamp, I know it should have the &amp;quot;prohibed ghost sign&amp;quot;! In this post, I'm gonna show you, how to use your smartthings hub to notify you when your travis deploy is broken.&lt;/p&gt;
&lt;p&gt;Well, it's not hard, in fact, you might get yours working in a couple of minutes. As said, I will need a Smarthing Hub and a Switch. Then you need to follow the steps on &lt;a class="reference external" href="https://github.com/dpjanes/iotdb-smartthings"&gt;Iotdb Smartthings&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With that setup, your smarthing thing had a JSON api that you can call on the cloud. All you need is the URL for the device and the access token. (I will post a simple code later)&lt;/p&gt;
&lt;p&gt;And finally, add the SMARTTHINGS_URL and SMARTTHINGS_ACCESS_TOKEN vars to your travis settings and the following code .travis file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;after_failure: &amp;gt;-
  curl -X PUT -H &amp;quot;Authorization: Bearer ${SMARTTHINGS_ACCESS_TOKEN}&amp;quot; -H &amp;quot;Content-Type: application/json&amp;quot; -d &amp;#39;{&amp;quot;switch&amp;quot;: 1}&amp;#39; ${SMARTTHINGS_URL}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Who are you gonna call?" src="https://gutomaia.net/images/ghostbusters_lamp.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;Then, when a build got rogue on wedNESday, I got it! I ain't gotta a build falling. Not on my watch!&lt;/p&gt;
</content><category term="automation"></category><category term="ghostbusters"></category><category term="travis"></category><category term="ci"></category><category term="automation"></category><category term="smartthings"></category></entry><entry><title>wedNESday #7 - More than just coding</title><link href="https://gutomaia.net/wednesday_7.html" rel="alternate"></link><published>2017-02-15T23:00:00-02:00</published><updated>2017-02-18T13:54:00-02:00</updated><author><name>Guto Maia</name></author><id>tag:gutomaia.net,2017-02-15:/wednesday_7.html</id><summary type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="more than coding" src="https://gutomaia.net/images/more_than_coding.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;One thing that I noticed on opensorce projects, it's more than just coding. Indeed the code itself is the center on wich everything else related to the project gravitates, but there is lot more. Today made some tweaks on my travis continuos integration, and also had a lot of reading ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="more than coding" src="https://gutomaia.net/images/more_than_coding.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;One thing that I noticed on opensorce projects, it's more than just coding. Indeed the code itself is the center on wich everything else related to the project gravitates, but there is lot more. Today made some tweaks on my travis continuos integration, and also had a lot of reading to keep up. I had make some proof of concepts related to plugins, and at the end I thought, wow that was very productive, but... wait... I didn't either write or commit a single line of code in the main project. How that could be productive? Did you ever had the same feeling?&lt;/p&gt;
&lt;p&gt;That happens a lot, 'cause you are building the ideia on your head. If you alredy knew, you would be just typing. Programing is much more related to thinking than pressing keys, although hollywood might disagree. In my daily work, my mind must be focused and aimed at the goal. But, in your personal projects, you must have fun along the way, let your mind flow for a while.&lt;/p&gt;
&lt;p&gt;In my opinion, opensource projects are marathons, not short runs. So have fun, appreciate the view, get some small detours. Don't rush and lose your breath, just keep going. If you can't enjoy yourself, how contributors will get inpired?&lt;/p&gt;
&lt;p&gt;And them, as said, there is much more than code. There must be passion doing this.&lt;/p&gt;
&lt;p&gt;Today's post is dedicated to my friend &lt;a class="reference external" href="https://twitter.com/luizf0510"&gt;Luiz Fuhrmeister&lt;/a&gt; who have passed away yesterday, on February 14.&lt;/p&gt;
&lt;div class="section" id="next-wednesday"&gt;
&lt;h2&gt;Next wedNESday&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Have more fun!&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</content><category term="nes"></category><category term="6502"></category><category term="nes"></category><category term="python"></category></entry><entry><title>wedNESday #6 - A bigger blender brain</title><link href="https://gutomaia.net/wednesday_6.html" rel="alternate"></link><published>2017-02-08T23:00:00-02:00</published><updated>2017-02-12T13:54:00-02:00</updated><author><name>Guto Maia</name></author><id>tag:gutomaia.net,2017-02-08:/wednesday_6.html</id><summary type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="Blender Brain" src="https://gutomaia.net/images/blender_bigger_brain.jpg" /&gt;
&lt;p class="caption"&gt;Blender Bigger Brain*&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;On last week's post, I had a &amp;quot;to do&amp;quot; list over the comments of the &amp;quot;upcoming improvements&amp;quot;. So &lt;a class="reference external" href="https://twitter.com/salexkidd"&gt;Toshimitsu Kamei&lt;/a&gt; came to the rescue again with the IO expander stuff. He sent some study material and sugests a small proof of concept just by following some internet ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="Blender Brain" src="https://gutomaia.net/images/blender_bigger_brain.jpg" /&gt;
&lt;p class="caption"&gt;Blender Bigger Brain*&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;On last week's post, I had a &amp;quot;to do&amp;quot; list over the comments of the &amp;quot;upcoming improvements&amp;quot;. So &lt;a class="reference external" href="https://twitter.com/salexkidd"&gt;Toshimitsu Kamei&lt;/a&gt; came to the rescue again with the IO expander stuff. He sent some study material and sugests a small proof of concept just by following some internet tutorials. He sugests the use of a MCP23017 I2C port expander.&lt;/p&gt;
&lt;p&gt;Then, let me share the links:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.raspberrypi-spy.co.uk/2013/07/how-to-use-a-mcp23017-i2c-port-expander-with-the-raspberry-pi-part-1/"&gt;How To Use A MCP23017 I2C Port Expander With The Raspberry Pi - part 1&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.raspberrypi-spy.co.uk/2013/07/how-to-use-a-mcp23017-i2c-port-expander-with-the-raspberry-pi-part-2/"&gt;How To Use A MCP23017 I2C Port Expander With The Raspberry Pi - part 2&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.raspberrypi-spy.co.uk/2013/07/how-to-use-a-mcp23017-i2c-port-expander-with-the-raspberry-pi-part-3/"&gt;How To Use A MCP23017 I2C Port Expander With The Raspberry Pi - part 3&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://hackaday.com/2011/06/07/working-with-i2c-port-expanders/"&gt;Working with I2C port expanders&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then, let's start reading and connecting wire jumps over the protoboard. I don't think that I will achieve a major breaktru this week, but I do need to improve my hardware skills.&lt;/p&gt;
</content><category term="nes"></category><category term="6502"></category><category term="nes"></category><category term="python"></category><category term="MCP23017"></category><category term="raspberrypi"></category></entry><entry><title>wedNESday #5 - It's alive!</title><link href="https://gutomaia.net/wednesday_5.html" rel="alternate"></link><published>2017-02-01T23:00:00-02:00</published><updated>2017-02-04T13:54:00-02:00</updated><author><name>Guto Maia</name></author><id>tag:gutomaia.net,2017-02-01:/wednesday_5.html</id><summary type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="it's alive" src="https://gutomaia.net/images/blender_terminal.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;First of all, I must thanks &lt;a class="reference external" href="https://twitter.com/salexkidd"&gt;Toshimitsu Kamei&lt;/a&gt;, without him this post wouln't be possible. Some time ago, he helped me up connecting the RasberryPI's GPIO along with &lt;a class="reference external" href="http://datasheets.chipdb.org/Western%20Design/W65C02S.pdf"&gt;W65C02S&lt;/a&gt;. It was fun, although I was kind of clumsy in this meantime, and them now I have to reattach everything. So ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="it's alive" src="https://gutomaia.net/images/blender_terminal.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;First of all, I must thanks &lt;a class="reference external" href="https://twitter.com/salexkidd"&gt;Toshimitsu Kamei&lt;/a&gt;, without him this post wouln't be possible. Some time ago, he helped me up connecting the RasberryPI's GPIO along with &lt;a class="reference external" href="http://datasheets.chipdb.org/Western%20Design/W65C02S.pdf"&gt;W65C02S&lt;/a&gt;. It was fun, although I was kind of clumsy in this meantime, and them now I have to reattach everything. So, let's do it.&lt;/p&gt;
&lt;div class="section" id="the-ingredients"&gt;
&lt;h2&gt;The Ingredients&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.amazon.com/gp/product/B01CD5VC92/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=B01CD5VC92&amp;amp;linkCode=as2&amp;amp;tag=gutomaia-20&amp;amp;linkId=e9dd7c39ce1445557706ad75cbf52728"&gt;Raspberry PI's 2 or 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Breadboard&lt;/li&gt;
&lt;li&gt;W65C02S&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.amazon.com/Honbay-120pcs-Multicolored-Female-Breadboard/dp/B017NEGTXC"&gt;Wires&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.amazon.com/gp/product/B01CNKXM54/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=B01CNKXM54&amp;amp;linkCode=as2&amp;amp;tag=gutomaia-20&amp;amp;linkId=92cbec6f2c6b0cc63afeaef93116a30b"&gt;GPIO Expansion Board&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You must use a Raspberry PI's 2 or above, due to the number of available GPIO ports. Using the GPIO Expansion Board is optional but highly recommended. The types of wiring that you might use depends if you be using or not the GPIO Expansion Board.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wiring-up"&gt;
&lt;h2&gt;Wiring Up&lt;/h2&gt;
&lt;p&gt;Not really a big deal, however, you need to be carefull and patient. Raspberry PI's GPIO is not so fault tolerant as the Arduino is, any wrong connection on the ground or VCC and you might kill it. About the W65C02S, I'm not so sure, didn't burn any so far.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="breadboard.jpg" src="https://gutomaia.net/images/blender_breadboard.jpg" /&gt;
&lt;p class="caption"&gt;GPIO's connections&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="hello-world"&gt;
&lt;h2&gt;Hello World&lt;/h2&gt;
&lt;p&gt;Now that we got all connected, let's say hello. The following &amp;quot;Hello World&amp;quot; will read the address bus after the reset. When started, 6502 must read content from address 0xfffa, although, anything from 0xfffa to 0xfffe would be nice.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GPIO.setmode(GPIO.BCM)


ADDRESS_PINS = [
    4, 17, 27, 22, 10, 9, 11, 5, 6, 13, 19, 26, 21, 20, 16, 12
]

RESET_PIN = 8
CLOCK_PIN = 7


def terminate(signum, frame):
    GPIO.cleanup()
    sys.exit(0)

def setup():
    # Address pins
    for pin in ADDRESS_PINS:
        GPIO.setup(pin, GPIO.IN, pull_up_down = GPIO.PUD_DOWN)

    # Reset pin
    GPIO.setup(RESET_PIN, GPIO.OUT)

    # Clock PIN (PHI2)
    GPIO.setup(CLOCK_PIN, GPIO.OUT)

    # SIGINT
    signal.signal(signal.SIGINT, terminate)


def reset():
    GPIO.output(RESET_PIN, GPIO.HIGH)
    time.sleep(0.1)
    GPIO.output(RESET_PIN, GPIO.LOW)
    time.sleep(0.1)
    GPIO.output(RESET_PIN, GPIO.HIGH)
    print(&amp;quot;reset complete&amp;quot;)

def send_clock():
    time.sleep(0.1)
    GPIO.output(CLOCK_PIN, GPIO.LOW)
    time.sleep(0.1)
    GPIO.output(CLOCK_PIN, GPIO.HIGH)

def read_address():
    pin_state = &amp;quot;&amp;quot;
    for pin in reversed(ADDRESS_PINS):
        pin_state += str(GPIO.input(pin))

    hex_address = hex(int(pin_state, 2))
    return pin_state, hex_address

def read_address2():
    pins = [int(GPIO.input(pin) for pin in ADDRESS_PINS)]

    state = sum([int(cc) * (2 ** i) for i, cc in enumerate(reversed(pins))])
    return state, hex(state)

def main_loop():
    while True:
        address = read_address()

        input = None
        input = raw_input(&amp;#39;(&amp;quot;reset&amp;quot;, (n)ext, &amp;quot;(r)ead&amp;quot;  [{}]&amp;gt; &amp;#39;.format(address))

        if input == &amp;quot;reset&amp;quot;:
            reset()
        elif input == &amp;quot;r&amp;quot;:
            print(&amp;quot;READ!: [{}]&amp;quot;.format(read_address()))

        else:
            print(&amp;quot;READ!: [{}]&amp;quot;.format(read_address()))
            send_clock()


if __name__ == &amp;quot;__main__&amp;quot;:
    setup()
    reset()
    try:
        main_loop()
    except:
        terminate()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Not much to watch right now. You only be able to reset and check that it is reading the expected address. So far, we just acomplished a overside blinking led demo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="upcomming-improvements"&gt;
&lt;h2&gt;Upcomming Improvements&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The reset routine is not consistent. Sometime it jumps to 0xfff[a-e], sometime it doesn't.&lt;/li&gt;
&lt;li&gt;If you took a closer look on the wiring, you will notice that not all PINs were connected. I know, we are just connecting the address bus. We did not connected the data bus due the lack of available ports. That's why we can only hear from the address bus so far.&lt;/li&gt;
&lt;li&gt;We need to use some IO expander for sending data to address bus and data bus, that way will be using less ports on the Raspberry PI.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="nes"></category><category term="6502"></category><category term="nes"></category><category term="python"></category><category term="raspberrypi"></category></entry><entry><title>wedNESday #4</title><link href="https://gutomaia.net/wednesday_4.html" rel="alternate"></link><published>2017-01-25T23:00:00-02:00</published><updated>2017-01-28T17:35:00-02:00</updated><author><name>Guto Maia</name></author><id>tag:gutomaia.net,2017-01-25:/wednesday_4.html</id><summary type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="Blender Brain" src="https://gutomaia.net/images/blender_brain.jpg" /&gt;
&lt;p class="caption"&gt;Blender Brain*&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="split-and-share"&gt;
&lt;h2&gt;Split and Share&lt;/h2&gt;
&lt;p&gt;I'm splitting the project wedNESday into a guide project. Unfortunelly, it does not have a catch name yet. The goal of this sidekick project is to serve as a lighthouse for thouse who attempt to create an emulator. It's filled with abstract test case scenarios ‚Ä¶&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="Blender Brain" src="https://gutomaia.net/images/blender_brain.jpg" /&gt;
&lt;p class="caption"&gt;Blender Brain*&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="split-and-share"&gt;
&lt;h2&gt;Split and Share&lt;/h2&gt;
&lt;p&gt;I'm splitting the project wedNESday into a guide project. Unfortunelly, it does not have a catch name yet. The goal of this sidekick project is to serve as a lighthouse for thouse who attempt to create an emulator. It's filled with abstract test case scenarios. Well, for now the sameone I already have on wedNESday (yep, mostly,just copy and clip).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-real-deal"&gt;
&lt;h2&gt;The Real Deal&lt;/h2&gt;
&lt;p&gt;As I had more time, due to a local holiday, I've spent a lot of time with an actual 6502 microprocessor, thanks to &lt;a class="reference external" href="https://twitter.com/salexkidd"&gt;Toshimitsu Kamei&lt;/a&gt;, who bought that for me sended it to Brazil from Japan. The MPU is a &lt;a class="reference external" href="http://datasheets.chipdb.org/Western%20Design/W65C02S.pdf"&gt;W65C02S&lt;/a&gt;. I'm using the RaspberryPi's GPIO to interract with it. So far, haven't done much. Still reading the manual and how to actially send and data and memory addresses. Also dealing with pinout flags, to understand when I should read from data and address and when I should write.&lt;/p&gt;
&lt;div class="section" id="trivia-fact"&gt;
&lt;h3&gt;Trivia fact&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Matt Groening's Futurama showed that Blender uses a 6502 CPU.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Futurama" src="https://gutomaia.net/images/futurama.jpg" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="next-wednesday"&gt;
&lt;h2&gt;Next wedNESday&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Don't know yet. I'll certainly have less time available this week. How about some GUI?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</content><category term="nes"></category><category term="nes"></category><category term="emulator"></category><category term="python"></category></entry><entry><title>wedNESday #3</title><link href="https://gutomaia.net/wednesday_3.html" rel="alternate"></link><published>2017-01-18T23:00:00-02:00</published><updated>2017-01-21T17:34:00-02:00</updated><author><name>Guto Maia</name></author><id>tag:gutomaia.net,2017-01-18:/wednesday_3.html</id><summary type="html">&lt;div class="section" id="goals-and-detours"&gt;
&lt;h2&gt;Goals and Detours&lt;/h2&gt;
&lt;p&gt;One of goals this week was to create a fake PPU, so that we can start testing it and playing with it and create a Pull Request in the py65 project with some tests. Although, while writing some tests in order to reach the first goal, I ‚Ä¶&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="goals-and-detours"&gt;
&lt;h2&gt;Goals and Detours&lt;/h2&gt;
&lt;p&gt;One of goals this week was to create a fake PPU, so that we can start testing it and playing with it and create a Pull Request in the py65 project with some tests. Although, while writing some tests in order to reach the first goal, I thought that I could do better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="running-some-asm-snippets"&gt;
&lt;h2&gt;Running some ASM snippets&lt;/h2&gt;
&lt;p&gt;For the fake PPU, I need some tests that calls it. All the tests that I had so far, dealed only with CPU. Then using &lt;a class="reference external" href="https://github.com/gutomaia/nesasm_py"&gt;nesasm_py&lt;/a&gt; I've managed to run some ASM code snippets within a test in a very readable way. I took some code snippets, some of them, like
&lt;a class="reference external" href="https://github.com/gutomaia/wedNESday/blob/9d162406bb01144b9339284801f4cd2e5c1ba352/wednesday/tests/nes_snippet_test.py#L104"&gt;load palettes&lt;/a&gt; uses the PPU. Then the detours started.&lt;/p&gt;
&lt;p&gt;Those tests open the possibility to run some book and tutorials codesnippets without much effort. I've started some demos from &lt;a class="reference external" href="http://www.6502.org/tutorials/compare_beyond.html"&gt;6502.org's compare beyond&lt;/a&gt;, now I'm playing with some codesnippets from the book &lt;a class="reference external" href="https://www.amazon.com/Machine-Language-Beginners-Richard-Mansfield/dp/0942386116"&gt;Machine Language for Beginners&lt;/a&gt; by Richard Mansfield.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="divide-and-conquer"&gt;
&lt;h2&gt;Divide and Conquer&lt;/h2&gt;
&lt;p&gt;I though, that not only py65 deserve some pull requests, but those demos might be useful for other projects. I'm thinking in creating kind of a 'guide' project/module just filled with tests in the most generic way. If anyone could think of a catch name, please tweet me!&lt;/p&gt;
&lt;p&gt;As usual, you can checkout the progress at &lt;a class="reference external" href="https://github.com/gutomaia/wedNESday"&gt;wedNESday repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="next-wednesday"&gt;
&lt;h2&gt;Next wedNESday&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It will be a holiday on S√£o Paulo-Brasil, thefore I might have more time to evolve on the PPU.&lt;/li&gt;
&lt;li&gt;Code Snippets from &lt;a class="reference external" href="https://www.amazon.com/Machine-Language-Beginners-Richard-Mansfield/dp/0942386116"&gt;Machine Language for Beginners&lt;/a&gt;'s book.&lt;/li&gt;
&lt;li&gt;Split the tests into a Guide project.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</content><category term="nes"></category><category term="nes"></category><category term="emulator"></category><category term="python"></category></entry><entry><title>wedNESday #2</title><link href="https://gutomaia.net/wednesday_2.html" rel="alternate"></link><published>2017-01-11T23:00:00-02:00</published><updated>2017-01-14T17:34:00-02:00</updated><author><name>Guto Maia</name></author><id>tag:gutomaia.net,2017-01-11:/wednesday_2.html</id><summary type="html">&lt;div class="section" id="keep-up"&gt;
&lt;h2&gt;Keep up&lt;/h2&gt;
&lt;p&gt;I've refactored the tests and extracted to &lt;a class="reference external" href="https://github.com/gutomaia/wedNESday/blob/68e17dff9ec06215c53f05c5069c3c06aadc8816/wednesday/tests/cpu_6502_spec.py"&gt;CPU6502Spec&lt;/a&gt;, and them start playing with py65. Didn't take long to have most of the test working. Now I have the same test spec running with either ApplyPy or Py65 6502, and that's amazing. Although, let's keep in mind that the ‚Ä¶&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="keep-up"&gt;
&lt;h2&gt;Keep up&lt;/h2&gt;
&lt;p&gt;I've refactored the tests and extracted to &lt;a class="reference external" href="https://github.com/gutomaia/wedNESday/blob/68e17dff9ec06215c53f05c5069c3c06aadc8816/wednesday/tests/cpu_6502_spec.py"&gt;CPU6502Spec&lt;/a&gt;, and them start playing with py65. Didn't take long to have most of the test working. Now I have the same test spec running with either ApplyPy or Py65 6502, and that's amazing. Although, let's keep in mind that the goal is a Ricoh 2A03 CPU, the NES CPU. And that lead us to deal with interrupts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="irq-and-nmi"&gt;
&lt;h2&gt;IRQ and NMI&lt;/h2&gt;
&lt;p&gt;IRQ stands for &amp;quot;Interrupt Request&amp;quot; and NMI for &amp;quot;Non-Masked Interrupt&amp;quot;. As far as I know, and please someone correct me if I got it wrong. Interrupts are used for event handling. On the NES, you have two CPUs (Main and PPU for graphics) that runs in parallel. There fore, to accurately emulate a NES, we need to deal with several race conditional on the hardware. Or, for start, we can make then serial (&lt;a class="reference external" href="https://wiki.nesdev.com/w/index.php/NMI_thread"&gt;NMI Thread&lt;/a&gt; on NESDev gives good tips in NMI only), and be able to run Super Mario Bros.&lt;/p&gt;
&lt;p&gt;As usual, you can checkout the progress at &lt;a class="reference external" href="https://github.com/gutomaia/wedNESday"&gt;wedNESday repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="next-wednesday"&gt;
&lt;h2&gt;Next wedNESday&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create a fake PPU and a memory bridge and try to run a simple waitvblank program.&lt;/li&gt;
&lt;li&gt;Create a pull request with CPUSpec and send to &lt;a class="reference external" href="https://github.com/mnaberez/py65"&gt;py65&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</content><category term="nes"></category><category term="nes"></category><category term="emulator"></category><category term="python"></category></entry><entry><title>wedNESday #1</title><link href="https://gutomaia.net/wednesday_1.html" rel="alternate"></link><published>2017-01-04T23:00:00-02:00</published><updated>2017-01-07T23:00:00-02:00</updated><author><name>Guto Maia</name></author><id>tag:gutomaia.net,2017-01-04:/wednesday_1.html</id><summary type="html">&lt;div class="section" id="forewords"&gt;
&lt;h2&gt;Forewords&lt;/h2&gt;
&lt;p&gt;I've been hacking the NES for quite a long time, and since them, I've always been asked for writing an emulator. Although it was never a priority, everytime a question like that stands, I usually answer: &amp;quot;Why not?&amp;quot;.&lt;/p&gt;
&lt;p&gt;Let's think over. Why should I, and why you should to ‚Ä¶&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="forewords"&gt;
&lt;h2&gt;Forewords&lt;/h2&gt;
&lt;p&gt;I've been hacking the NES for quite a long time, and since them, I've always been asked for writing an emulator. Although it was never a priority, everytime a question like that stands, I usually answer: &amp;quot;Why not?&amp;quot;.&lt;/p&gt;
&lt;p&gt;Let's think over. Why should I, and why you should to? There are already several good emulators available, why write another one?&lt;/p&gt;
&lt;p&gt;Moreover, googling about the subject &amp;quot;write nes emulator&amp;quot;, there are several good stories. I've put the most relevant links at the bottom. I also recomend you to read them.&lt;/p&gt;
&lt;p&gt;Therefore. What to tell abount NES emulators that haven't already being told? Well, not saying that I do intend to fishish it, but let's explore more the ideia.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="press-start"&gt;
&lt;h2&gt;Press Start&lt;/h2&gt;
&lt;p&gt;In order to write the emulator, we need to keep up with the overall architecture that was involved. For now, let's focus on the CPU. NES had a ‚ÄéRicoh 2A03 CPU with the same instruaction set of the 6502. Since we are talking about code. Let highlight the code
from Niels Widger's &lt;a class="reference external" href="https://github.com/nwidger/nintengo"&gt;Nintengo&lt;/a&gt;. It's very polished, and more important, it's filled with tests. So as a experiment, I've rewrote the tests and used on the James Tauber's &lt;a class="reference external" href="https://github.com/jtauber/applepy"&gt;ApplePy&lt;/a&gt;, most impressive, without mush effort, the test spec payoff, and show how well made ApplePy is.&lt;/p&gt;
&lt;p&gt;You can checkout the progress at &lt;a class="reference external" href="https://github.com/gutomaia/wedNESday"&gt;wedNESday repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="next-wednesday"&gt;
&lt;h2&gt;Next wedNESday&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Get a better understand on how IRQ and NMI works&lt;/li&gt;
&lt;li&gt;try to do the same with &lt;a class="reference external" href="https://github.com/mnaberez/py65"&gt;py65&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwidger.github.io/blog/post/writing-an-nes-emulator-in-go-part-1/"&gt;Writing an NES emulator in Go Part 1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://blog.alexanderdickson.com/javascript-nes-emulator-part-1"&gt;Write a NES Emulator with Javascript Part 1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://blog.alexanderdickson.com/javascript-nes-emulator-part-2"&gt;Write a NES Emulator with Javascript Part 2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://medium.com/&amp;#64;fogleman/i-made-an-nes-emulator-here-s-what-i-learned-about-the-original-nintendo-2e078c9b28fe#.7535jmlgd"&gt;I made an NES emulator Heres what I learned about the original Nintendo&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="nes"></category><category term="nes"></category><category term="emulator"></category><category term="python"></category></entry><entry><title>The First Post</title><link href="https://gutomaia.net/first_post.html" rel="alternate"></link><published>2016-02-20T19:18:00-02:00</published><updated>2016-02-20T22:21:00-02:00</updated><author><name>Guto Maia</name></author><id>tag:gutomaia.net,2016-02-20:/first_post.html</id><summary type="html">&lt;p&gt;This is not my first attempt to write a blog, nevertheless, shall be the last. However, in this brief time lapse before the next attempt I must overcome the mistakes that lead previous blog to fade after the &amp;quot;First Post&amp;quot;.&lt;/p&gt;
&lt;p&gt;One early mistake is the actual &amp;quot;first post&amp;quot;. Usually, in ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is not my first attempt to write a blog, nevertheless, shall be the last. However, in this brief time lapse before the next attempt I must overcome the mistakes that lead previous blog to fade after the &amp;quot;First Post&amp;quot;.&lt;/p&gt;
&lt;p&gt;One early mistake is the actual &amp;quot;first post&amp;quot;. Usually, in the content is said what's the blog is about and dictate boundaries for what readers might find. This time, I won't put any restriction. I might write about books that I'm reading, code and hacks and whatever comes in mind.&lt;/p&gt;
&lt;p&gt;My second mistake was the platform. Previous blogs were done with wordpress and &amp;quot;Meme&amp;quot;, a discontinued Yahoo blog platform. Neither them suited me well. The first is jungle of templates and plugins that don't get along well and the second was discontinued despite being great, what also made me avoid other platforms like tumblr and medium.&lt;/p&gt;
&lt;p&gt;Third mistake, was trying to being perfect. That end up with fewer post and lots of unfinished drafts. Most of then were kept as draft due to the fear of critcism.&lt;/p&gt;
&lt;p&gt;As a coder, I found markdown generated blogs more suited for daily use. With trivial automated scripts, I can easily update content with a commit, friends could send fix and even submit article with pull requests.&lt;/p&gt;
</content><category term="misc"></category><category term="startover"></category></entry></feed>